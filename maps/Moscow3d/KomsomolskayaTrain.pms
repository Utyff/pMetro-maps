var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Clocks, ClipHead, ClipTail: array[0..5] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..5] of Boolean;
  Stops: array[0..5] of extended;
  LeftDoor: array[0..5] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, ys, zs:  array[0..11] of extended; 
  PathLength: array[0..11] of extended;

  // пантограф
  ad0, au0, ld, lu, base: extended;

{$I ToolsTrain.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := False;
    DoClipHead[i] := False;
    DoClipTail[i] := False;
  end;

  NodeCount := 2;
  xs[0] := 1846; ys[0] := -3860; zs[0] := 1062;
  xs[1] := 287;  ys[1] := ys[0]; zs[1] := zs[0];
  Stops[0] := -0.2;
  LeftDoor[0] := False;

  xs[2] := xs[0]; ys[2] := -4133; zs[2] := zs[0];
  xs[3] := xs[1]; ys[3] := ys[2]; zs[3] := zs[0];
  Stops[1] := Stops[0];
  LeftDoor[1] := True;

  xs[4] := xs[0]; ys[4] := -4247; zs[4] := zs[0];
  xs[5] := xs[1]; ys[5] := ys[4]; zs[5] := zs[0];
  Stops[2] := Stops[0];
  LeftDoor[2] := False;

  xs[6] := xs[0]; ys[6] := -4520; zs[6] := zs[0];
  xs[7] := xs[1]; ys[7] := ys[6]; zs[7] := zs[0];
  Stops[3] := Stops[0];
  LeftDoor[3] := True;

  xs[8] := xs[0]; ys[8] := -4634; zs[8] := zs[0];
  xs[9] := xs[1]; ys[9] := ys[8]; zs[9] := zs[0];
  Stops[4] := Stops[0];
  LeftDoor[4] := False;

  xs[10] := 2487; ys[10] := -4907;  zs[10] := zs[0];
  xs[11] := 927;  ys[11] := ys[10]; zs[11] := zs[0];
  Stops[5] := Stops[0];
  LeftDoor[5] := True;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 6; // количество часов и поездов
  VagonCount := 4;
  StopTime := 60;        // остановка - 60 секунд

  InitPath;
//  InitClock;
  InitTrain;

  // удал€ем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');

  // пантограф
  ad0 := 37.7 / 57.3; // начальный угол нижней рамы
  au0 := 30.4 / 57.3; // начальный угол верхней рамы
  ld := 30.9; // длина нижней рамы
  lu := 49.1; // длина верхней рамы
  base := 35.6; // длина базы
end; // Init

procedure DrawPantograf(H, AngleD, AngleU: extended);
var x, z: extended;
begin
//h := 0;
  // верхний полоз
  glPushMatrix;
  glTranslatef(0, 0, H);
  Draw3dObject('Train.MotorVagon.Poloz');
  glPopMatrix;

  // нижний правый
  x := -203.35;
  z := 144;
  glPushMatrix;
  glTranslatef(x, 0, z);
  glRotatef(AngleD * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanLD');
  glPopMatrix;

  // нижний левый
  x := -167.7;
  z := 144;
  glPushMatrix;
  glTranslatef(x, 0, z);
  glRotatef(-AngleD * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanRD');
  glPopMatrix;

  // верхний левый
  x := -185;
  z := 188;
  glPushMatrix;
  glTranslatef(x, 0, z + H);
  glRotatef(-AngleU * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanRU');
  glPopMatrix;

  // верхний правый
  x := -185;
  z := 188;
  glPushMatrix;
  glTranslatef(x, 0, z + H);
  glRotatef(AngleU * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanLU');
  glPopMatrix;
end; // DrawPantograf

procedure DrawPantografs(part: extended);
var AngleD, AngleU, x1, y1, H: extended;
begin
  AngleD := part * 0.6;

  y1 := ld * sin(ad0 - AngleD);
  x1 := base / 2 + ld * cos(ad0 - AngleD);
  AngleU := ArcCos(x1 / lu);
  H := y1 + lu * sin(AngleU) - ld * sin(ad0) - lu * sin(au0);

  DrawPantograf(H, -AngleD, -AngleU + au0);
  glRotatef(180, 0, 0, 1);
  glTranslatef(1299.6, 0, 0);
  DrawPantograf(H, -AngleD, -AngleU + au0);
end; // DrawPantografs

procedure DrawTrain1(TrainNumber: integer; LeftOpened: Boolean);
var dt, LHead, dDoor, dPan: extended;
    Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1: extended;
begin
  dt := t - tArrive[0];
//  dt := 30.1; // раскомментируй эту строку, чтобы зафиксировать поезда на платформе
  if (dt > StopTime + 20) or (dt < -20) then
    exit;

  // рассчитываем торможение, сто€нку и разгон. —то€нка - с 0-й до 6-й сек.
  // 0 - поезд стоит на платформе
  if dt < -4 then
    LHead := -4 * dt - 8
  else if dt < 0 then
    LHead := dt ^ 2 / 2
  else if dt < StopTime then
    LHead := 0               // сто€нка
  else if dt < StopTime + 9 then
    LHead := (dt - StopTime) ^ 1.5 // разгон
  else
    LHead :=  4.5 * (dt - StopTime - 9) + 9 ^ 1.5;

  // рассчитываем положение дверей 0 - закрыто, 1 - открыто
  if dt < 0.5 then
    dDoor := 0
  else if dt <= 1.5 then
    dDoor := (dt - 0.5) ^ 2
  else if dt <= 18 then
    dDoor := 1
  else if dt <= 19 then
    dDoor := 1 - (dt - 18) ^ 2
  else if dt < 41 then
    dDoor := 0
  else if dt <= 42 then
    dDoor := (dt - 41) ^ 2
  else if dt <= 58 then
    dDoor := 1
  else if dt <= 59 then
    dDoor := 1 - (dt - 58) ^ 2
  else
    dDoor := 0;

  // рассчитываем положение пантографа 0 - подн€т, 1 - опущен
  if dt < 20 then
    dPan := 0
  else if dt <= 21 then
    dPan := (dt - 20) ^ 2
  else if dt <= 38 then
    dPan := 1
  else if dt <= 39 then
    dPan := 1 - (dt - 38) ^ 2
  else
    dPan := 0;

  // при помощи коэффициентов приводим к масштабу
  LHead := - LHead * 50 + Stops[TrainNumber];
  dDoor := dDoor * 14;

  CalcWheel(TrainNumber, LHead - Tel2[0], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
  // поезд
  glPushMatrix;
  glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
  glRotatef(AngleXY1, 0, 0, 1); // ѕоворачиваем сцену на угол вокруг оси Z
//  glRotatef(-AngleZ1, 0, 1, 0); // ѕоворачиваем сцену на угол вокруг оси Y
  if dPan <> 0 then begin
    Draw3dObject('Train.Train.ClosedWOPantograf');
    DrawPantografs(dPan);
  end else if dDoor = 0 then
    Draw3dObject('Train.Train.Closed')
  else if LeftOpened then begin
    Draw3dObject('Train.Train.LeftOpened');

    // рисуем двери
    glTranslatef(dDoor, 0, 0); // Ћева€ дверь
    Draw3dObject('Train.dverLL');
    glTranslatef(-2 * dDoor, 0, 0); // ѕрава€ дверь
    Draw3dObject('Train.dverLR');
  end else begin
    Draw3dObject('Train.Train.RightOpened');

    // рисуем двери
    glTranslatef(dDoor, 0, 0); // Ћева€ дверь
    Draw3dObject('Train.dverRR');
    glTranslatef(-2 * dDoor, 0, 0); // ѕрава€ дверь
    Draw3dObject('Train.dverRL');
  end;
  glPopMatrix;
end; // DrawTrain1

var StartStatus: integer;
    i, CurrentPath: integer;
    Hour: word;
    CurrentSet: Boolean;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

//  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then begin
    GetInitPositions;

    CurrentPath := Random(TrainCount);
    tArrive[CurrentPath] := tArrive[0];
    CurrentSet := True;
  end else begin
    GetPositionAbovePeriod;

    if t > tArrive[0] then
      CurrentSet := False
    else if not CurrentSet then begin
      CurrentPath := Random(TrainCount);
      tArrive[CurrentPath] := tArrive[0];
      CurrentSet := True;
    end;
  end;

  // рисуем поезд
  DrawTrain1(CurrentPath, LeftDoor[CurrentPath]);
//  DrawPath(20);
  StartStatus := 1;
end.