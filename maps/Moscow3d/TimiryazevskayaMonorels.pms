var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..0] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..0] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, ys, zs: array[0..76] of extended; 
  PathLength: array[0..76] of extended;

  t0, t1, t2: extended;

{$I ToolsMonorail.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := False;
    DoClipHead[i] := False;
    DoClipTail[i] := False;
  end;

  NodeCount := 77;
  xs[0]  := 2038;  ys[0] := -180;  zs[0] := 107;
  xs[1]  := 104; ys[1] := -180; zs[1] := zs[0];
  xs[2]  := 87; ys[2] := -181; zs[2] := zs[0];
  xs[3]  := 67; ys[3] := -184; zs[3] := zs[0];
  xs[4]  := 45; ys[4] := -187; zs[4] := zs[0];
  xs[5]  := 23; ys[5] := -191; zs[5] := zs[0];
  xs[6]  := -1; ys[6] := -196; zs[6] := zs[0];
  xs[7]  := -25; ys[7] := -201; zs[7] := zs[0];
  xs[8]  := -49; ys[8] := -208; zs[8] := zs[0];
  xs[9]  := -74; ys[9] := -215; zs[9] := zs[0];
  xs[10]  := -100; ys[10] := -224; zs[10] := zs[0];
  xs[11]  := -127; ys[11] := -233; zs[11] := zs[0];
  xs[12]  := -154; ys[12] := -243; zs[12] := zs[0];
  xs[13]  := -181; ys[13] := -254; zs[13] := zs[0];
  xs[14]  := -208; ys[14] := -265; zs[14] := zs[0];
  xs[15]  := -236; ys[15] := -279; zs[15] := zs[0];
  xs[16]  := -263; ys[16] := -293; zs[16] := zs[0];
  xs[17]  := -290; ys[17] := -308; zs[17] := zs[0];
  xs[18]  := -319; ys[18] := -326; zs[18] := zs[0];
  xs[19]  := -347; ys[19] := -344; zs[19] := zs[0];
  xs[20]  := -375; ys[20] := -363; zs[20] := zs[0];
  xs[21]  := -401; ys[21] := -381; zs[21] := zs[0];
  xs[22]  := -427; ys[22] := -399; zs[22] := zs[0];
  xs[23]  := -451; ys[23] := -417; zs[23] := zs[0];
  xs[24]  := -476; ys[24] := -436; zs[24] := zs[0];
  xs[25]  := -499; ys[25] := -454; zs[25] := zs[0];
  xs[26]  := -523; ys[26] := -474; zs[26] := zs[0];
  xs[27]  := -545; ys[27] := -493; zs[27] := zs[0];
  xs[28]  := -567; ys[28] := -513; zs[28] := zs[0];
  xs[29]  := -588; ys[29] := -532; zs[29] := zs[0];
  xs[30]  := -689; ys[30] := -596; zs[30] := zs[0];
  xs[31]  := -805; ys[31] := -638; zs[31] := zs[0];
  xs[32]  := -930; ys[32] := -652; zs[32] := zs[0];
  xs[33]  := -1054; ys[33] := -638; zs[33] := zs[0];
  xs[34]  := -1170; ys[34] := -597; zs[34] := zs[0];
  xs[35]  := -1271; ys[35] := -532; zs[35] := zs[0];
  xs[36]  := -1356; ys[36] := -447; zs[36] := zs[0];
  xs[37]  := -1420; ys[37] := -346; zs[37] := zs[0];
  xs[38]  := -1461; ys[38] := -232; zs[38] := zs[0];
  xs[39]  := -1476; ys[39] := -107; zs[39] := zs[0];
  xs[40]  := -1461; ys[40] := 19; zs[40] := zs[0];
  xs[41]  := -1420; ys[41] := 134; zs[41] := zs[0];
  xs[42]  := -1356; ys[42] := 235; zs[42] := zs[0];
  xs[43]  := -1271; ys[43] := 320; zs[43] := zs[0];
  xs[44]  := -1170; ys[44] := 384; zs[44] := zs[0];
  xs[45]  := -1055; ys[45] := 425; zs[45] := zs[0];
  xs[46]  := -929; ys[46] := 440; zs[46] := zs[0];
  xs[47]  := -708; ys[47] := 440; zs[47] := zs[0];
  xs[48]  := -663; ys[48] := 438; zs[48] := zs[0];
  xs[49]  := -620; ys[49] := 436; zs[49] := zs[0];
  xs[50]  := -578; ys[50] := 432; zs[50] := zs[0];
  xs[51]  := -538; ys[51] := 426; zs[51] := zs[0];
  xs[52]  := -499; ys[52] := 419; zs[52] := zs[0];
  xs[53]  := -462; ys[53] := 411; zs[53] := zs[0];
  xs[54]  := -426; ys[54] := 401; zs[54] := zs[0];
  xs[55]  := -393; ys[55] := 388; zs[55] := zs[0];
  xs[56]  := -361; ys[56] := 373; zs[56] := zs[0];
  xs[57]  := -330; ys[57] := 356; zs[57] := zs[0];
  xs[58]  := -301; ys[58] := 338; zs[58] := zs[0];
  xs[59]  := -273; ys[59] := 321; zs[59] := zs[0];
  xs[60]  := -245; ys[60] := 304; zs[60] := zs[0];
  xs[61]  := -218; ys[61] := 289; zs[61] := zs[0];
  xs[62]  := -192; ys[62] := 275; zs[62] := zs[0];
  xs[63]  := -167; ys[63] := 262; zs[63] := zs[0];
  xs[64]  := -142; ys[64] := 250; zs[64] := zs[0];
  xs[65]  := -118; ys[65] := 238; zs[65] := zs[0];
  xs[66]  := -94; ys[66] := 227; zs[66] := zs[0];
  xs[67]  := -72; ys[67] := 218; zs[67] := zs[0];
  xs[68]  := -49; ys[68] := 209; zs[68] := zs[0];
  xs[69]  := -24; ys[69] := 202; zs[69] := zs[0];
  xs[70]  := 2; ys[70] := 196; zs[70] := zs[0];
  xs[71]  := 28; ys[71] := 191; zs[71] := zs[0];
  xs[72]  := 53; ys[72] := 187; zs[72] := zs[0];
  xs[73]  := 75; ys[73] := 184; zs[73] := zs[0];
  xs[74]  := 93; ys[74] := 182; zs[74] := zs[0];
  xs[75]  := 103; ys[75] := 181; zs[75] := zs[0];
  xs[76]  := 2039; ys[76] := 181; zs[76] := zs[0];

  Stops[0] := 75.45;
  Clocks[0] := 0;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 1; // количество часов и поездов
  VagonCount := 6;
  StopTime := 10;        // остановка - 10 секунд

  t0 := 0;   // время первой стоянки
  t1 := 50;  // время второй стоянки
  t2 := 102; // время третьей стоянки

  InitPath;
  InitClock;
  InitTrain;

  // удаляем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');
  HideObject('Switch');
end; // Init

function CalcDoor1(dt: extended): extended;
var dDoor: extended;
begin
  // рассчитываем положение дверей 0 - закрыто, 1 - открыто
  if (dt > 0.5) and (dt <= 1.5) then
    dDoor := (dt - 0.5) ^ 2
  else if (dt > 1.5) and (dt <= StopTime - 2) then
    dDoor := 1
  else if (dt > StopTime - 2) and (dt <= StopTime - 1) then
    dDoor := 1 - (dt - (StopTime - 2)) ^ 2
  else if (dt > t2 + 0.5) and (dt <= t2 + 1.5) then
    dDoor := (dt - t2 - 0.5) ^ 2
  else if (dt > t2 + 1.5) and (dt <= t2 + StopTime - 2) then
    dDoor := 1
  else if (dt > t2 + StopTime - 2) and (dt <= t2 + StopTime - 1) then
    dDoor := 1 - (dt - t2 - (StopTime - 2)) ^ 2
  else
    dDoor := 0;
  Result := dDoor * 21;
end; // CalcDoor1

var vOld, tOld: extended;
function CalcLength(dt, L, dtNew, vNew: extended): extended;
begin
  if dt > tOld + dtNew then
    Result := L + (vNew + vOld) * dtNew / 2
  else if dt > tOld then
    Result := L + (vOld + (vOld + (vNew - vOld) / dtNew * (dt - tOld))) / 2 * (dt - tOld)
  else
    Result := L;
  vOld := vNew;
  tOld := tOld + dtNew;
end;

function CalcTrain1(dt: extended; typ: integer): extended;
// typ: 0 - стоит на платформе, 1 - обычный, 2 - обратный, т.е. тупик, 3 - проходной
var L: extended;
    nt, v: extended;
begin
  if typ = 0 then
    L := 0
  else begin
    tOld := 0; vOld := 0; L := 0;
    L := CalcLength(dt, L, -10, 10);
    L := CalcLength(dt, L, 10, 0); // 1-я остановка
    L := CalcLength(dt, L, 10, 0);
    L := CalcLength(dt, L, 10, 5);
    L := CalcLength(dt, L, 17, 5);
    L := CalcLength(dt, L, 10, 0); // 2-я остановка
    t1 := tOld;
    L := CalcLength(dt, L, 10, 0);
    L := CalcLength(dt, L, 10, 5);
    L := CalcLength(dt, L, 15, 5);
    L := CalcLength(dt, L, 10, 0); // 3-я остановка
    t2 := tOld;
    L := CalcLength(dt, L, 10, 0);
    L := CalcLength(dt, L, 10, 10);
    L := CalcLength(dt, L, 100, 10);
  end;

  Result := L;
end; // CalcTrain1

procedure DrawTrain1(TrainNumber: integer; LeftOpened: Boolean; typ: integer);
var dt, dDoor, LHead: extended;
    i, SegmentHead, SegmentTail: integer;
    Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1: extended;
    Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2: extended;
    OldWheelX, OldWheelY: extended;
    StraightTrain: Boolean;
begin
  dt := t - tArrive[TrainNumber];

  if typ = 0 then
    dt := 3;
  if (dt > t2 + 20) or (dt < -8) then
    exit;

  // запоминаем, когда поезд отправился, для часов
  if (dt > StopTime + 3) and (tDeparture[TrainNumber] < tArrive[TrainNumber]) then
    tDeparture[TrainNumber] := Round(t) + 0.5;

  LHead := CalcTrain1(dt, typ);

  // обрезка
  if (LHead > 0) and DoClipHead[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipHead[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(-1, 0, 0, 0);
    glPopMatrix;
  end else if (LHead < 0) and DoClipTail[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipTail[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(1, 0, 0, 0);
    glPopMatrix;
  end;

  // при помощи коэффициентов приводим к масштабу
  LHead := -25 * LHead + Stops[TrainNumber];
  dDoor := CalcDoor1(dt);

  // определяем, рисовать ли поезд повагонно, или целиком.
  StraightTrain := NodeCount = 2;
  if not StraightTrain then begin
    SegmentHead := Path2Segment(TrainNumber, LHead - tel[0] - WheelBase / 2);
    SegmentTail := Path2Segment(TrainNumber, LHead - tel[VagonCount] + WheelBase / 2);
    if SegmentTail = NodeCount * (TrainNumber + 1) - 1 then
      SegmentTail := NodeCount * (TrainNumber + 1) - 2;
    StraightTrain := SegmentHead = SegmentTail;
  end;

  if not StraightTrain then begin
    for i := 0 to VagonCount do begin
      // тележка
      CalcWheel(TrainNumber, LHead - tel[i] + WheelBase / 2, Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
      CalcWheel(TrainNumber, LHead - tel[i] - WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      Wheel1X := (Wheel1X + Wheel2X) / 2;
      Wheel1Y := (Wheel1Y + Wheel2Y) / 2;
      AngleXY1 := Arctan2(Wheel2Y - Wheel1Y, Wheel2X - Wheel1X) * 57.3;
      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
//      glRotatef(AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Mono.Wheel');
      glPopMatrix;

      if i > 0 then begin
        glPushMatrix;
        glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
        glRotatef(Arctan2(OldWheelY - Wheel1Y, OldWheelX - Wheel1X) * 57.3, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
//        glRotatef(Arctan2(OldWheelZ - Wheel1Z, sqrt(sqr(Wheel2Y - Wheel1Y) + sqr(Wheel2X - Wheel1X))) * 57.3, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
        Draw3dObject('Mono.Vagon' + VagonName[i - 1]);
        glPopMatrix;
      end;

      OldWheelX := Wheel1X;
      OldWheelY := Wheel1Y;
    end;
  end else begin
    glPushMatrix;
      // поезд
    CalcWheel(TrainNumber, LHead - Tel[0], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    glRotatef(-AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
    if dDoor = 0 then
      Draw3dObject('Mono.Train.Closed')
    else begin
      if LeftOpened then begin
        // поезд
        Draw3dObject('Mono.Train.LeftOpened');
        // двери
        glTranslatef(dDoor, 0, 0); // Левая дверь
        Draw3dObject('Mono.dverLL');
        glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
        Draw3dObject('Mono.dverLR');
      end else begin
        // поезд
        Draw3dObject('Metro.Train.RightOpened');
        // двери
        glTranslatef(dDoor, 0, 0); // Левая дверь
        Draw3dObject('Metro.dverRR');
        glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
        Draw3dObject('Metro.dverRL');
      end;
    end;

    glPopMatrix;
  end;

  // отключаем обрезку
//  if DoClip[TrainNumber] then
//  DisableClipPlane;
end; // DrawTrain1

procedure DrawSwitch(dt: extended);
var SwitchAngle: extended;
begin
  // стрелка
  glPushMatrix;
  glTranslatef(0, 181.0062, 80.8715); 
  if dt >= 55 then
    SwitchAngle := 180
  else if dt > 35 then
    SwitchAngle := (dt - 35) / 20 * 180
  else if dt > 5 then
    SwitchAngle := 0
  else if dt > -15 then
    SwitchAngle := (1 - (dt + 15) / 20) * 180
  else
    SwitchAngle := 180;
  glRotatef(SwitchAngle, 1, 0, 0);
  glTranslatef(0, -181.0062, -80.8715);
  Draw3dObject('Switch');
  glPopMatrix;
end; // DrawSwitch

procedure GetPositionAbovePeriod1;
var i: integer;
begin
  for i := 0 to TrainCount - 1 do
    if (t > tArrive[i] + (t0 + t2) / 2 + StopTime / 2 + Period / 2) or (t < tArrive[i] - Period) then
      tArrive[i] := Max(Round(tArrive[i] + Period + (Random(1) * 2 - 1) * Period * 0.25), t + 15)
    else if t < tArrive[i] - Period then
      tArrive[i] := tArrive[i] - 86400;
end; // GetPositionAbovePeriod1

var StartStatus: integer;
    i: integer;
    Hour: word;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

  DrawEscalatorStairs(Hour, t);

  DrawSwitch(t - tArrive[0]);

  if StartStatus = 0 then
    GetInitPositions
  else
    GetPositionAbovePeriod1;

  // рисуем поезда
  DrawTrain1(0, True, 1);
//  DrawPath(16);

  StartStatus := 1;
end.