var 
  // поезда
  TrainCount: integer;
  tArrive, Stops: array[0..2] of extended;
  // tArrive - это точка отсчёта движения поезда. Обычно = 0 в момент первой остановки
  TrainStatus: array[0..2] of integer;
  // статус поезда: 
  //   0 - еду вправо на нижний.
  //   1 - еду вправо на верхний.
  //   2 - еду влево с нижнего.
  //   3 - еду влево с верхнего.

  ClockCount: integer;
  tDeparture, Clocks: array[0..1] of extended;
  ShowClock: array[0..1] of Boolean;
  // tDeparture - это время для часов - когда отправился последний поезд
  // Clocks - где именно висят часы

  PathCount: integer;
  ClipHead, ClipTail: array[0..3] of extended;
  DoClipHead, DoClipTail: array[0..3] of Boolean;


  // рельсы
  NodeCount: integer;
  xs, xs2, xs3, xs4, ys, ys2, ys3, ys4, zs, zs2, zs3, zs4: array[0..18] of extended; 
  PathLength, PathLength2, PathLength3, PathLength4: array[0..18] of extended;

  t2: extended; // время остановки в тупике
  t3: extended; // время остановки на второй платформе

{$I ToolsEzh.pms}

var vOld, tOld: extended;
function CalcLength(dt, L, dtNew, vNew: extended): extended;
begin
  if dt > tOld + dtNew then
    Result := L + (vNew + vOld) * dtNew / 2
  else if dt > tOld then
    Result := L + (vOld + (vOld + (vNew - vOld) / dtNew * (dt - tOld))) / 2 * (dt - tOld)
  else
    Result := L;
  vOld := vNew;
  tOld := tOld + dtNew;
end;

function CalcTrain1(dt: extended; typ: integer): extended;
// typ: 0 - стоит на платформе, 1 - обычный, 2 - обратный, т.е. тупик, 3 - проходной
var L: extended;
    nt, v: extended;
begin
  tOld := -100; vOld := 10; L := -950;
  L := CalcLength(dt, L, 90, 10);
  L := CalcLength(dt, L, 10, 0); // 1-я остановка
  L := CalcLength(dt, L, StopTime, 0);
  L := CalcLength(dt, L, 10, 3);
  L := CalcLength(dt, L, 9, 3);
  L := CalcLength(dt, L, 10, 0); // 2-я остановка
  t2 := tOld;
  L := CalcLength(dt, L, StopTime, 0);
  L := CalcLength(dt, L, 10, -3);
  L := CalcLength(dt, L, 9, -3);
  L := CalcLength(dt, L, 10, 0); // 3-я остановка
  t3 := tOld;
  L := CalcLength(dt, L, StopTime, 0);
  L := CalcLength(dt, L, 10, -10);
  MaxTime := tOld + 7;
  L := CalcLength(dt, L, 100, -10);
  Result := L;
end;


procedure InitPath;
var i, j: integer;
begin
  for i := 0 to ClockCount - 1 do
    ShowClock[i] := True;

  for i := 0 to PathCount - 1 do begin
    DoClipHead[i] := False;
    DoClipTail[i] := False;
  end;

  NodeCount := 19;

  xs[0] := 4005; ys[0] := -655;
  xs[1] := 2155; ys[1] := -655;
  xs[2] := 2093; ys[2] := -656.5;
  xs[3] := 2031; ys[3] := -661;
  xs[4] := 1970; ys[4] := -666;
  xs[5] := 1910; ys[5] := -673;
  xs[6] := 1852; ys[6] := -681;
  xs[7] := 1794; ys[7] := -690.5;
  xs[8] := 1737; ys[8] := -701.5;
  xs[9] := 1682; ys[9] := -713;
  xs[10] := 1628; ys[10] := -723;
  xs[11] := 1573; ys[11] := -732;
  xs[12] := 1518; ys[12] := -738.5;
  xs[13] := 1462; ys[13] := -744;
  xs[14] := 1406; ys[14] := -747;
  xs[15] := 1350; ys[15] := -748;
  xs[16] := 1293; ys[16] := -748;
  xs[17] := 1237; ys[17] := -748;
  xs[18] := -5037;ys[18] := -748;

  xs2[0] := 4005; ys2[0] := -748;
  xs2[1] := 2155; ys2[1] := -748;
  xs2[2] := 2093; ys2[2] := -746;
  xs2[3] := 2032; ys2[3] := -742;
  xs2[4] := 1971; ys2[4] := -736;
  xs2[5] := 1910; ys2[5] := -729;
  xs2[6] := 1851; ys2[6] := -721;
  xs2[7] := 1794; ys2[7] := -711.5;
  xs2[8] := 1737; ys2[8] := -701;
  xs2[9] := 1682; ys2[9] := -689.4;
  xs2[10] := 1628; ys2[10] := -679;
  xs2[11] := 1573; ys2[11] := -670.2;
  xs2[12] := 1518; ys2[12] := -663.5;
  xs2[13] := 1462; ys2[13] := -658;
  xs2[14] := 1406; ys2[14] := -655.5;
  xs2[15] := 1350; ys2[15] := -655;
  xs2[16] := 1293; ys2[16] := -655;
  xs2[17] := 1237; ys2[17] := -655;
  xs2[18] :=-5037; ys2[18] := -655;

  for i := 0 to NodeCount - 1 do begin
    zs[0] := 2.2;
    zs2[0] := zs[0];
    xs3[i] := xs[i];
    ys3[i] := ys[0];
    zs3[0] := zs[0];
    xs4[i] := xs2[i];
    ys4[i] := ys2[0];
    zs4[0] := zs[0];
  end;

  // рассчитываем длины трасс
  for j := 0 to PathCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do
    Stops[i] := Segment2Path(i, Stops[i]);
  for i := 0 to ClockCount - 1 do
    Clocks[i] := Segment2Path(i, Clocks[i]);
  for i := 0 to PathCount - 1 do begin
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init;
begin
  TrainCount := 3; // количество поездов
  VagonCount := 3;
  ClockCount := 2; // количество часов
  PathCount := 4;  // количество путей

  StopTime := 8;   // остановка - 8 секунд


  Clocks[0] := 17.01;
  Clocks[1] := 0.71;

  Stops[0] := 17.045;
  Stops[1] := Stops[0];
  Stops[2] := Stops[0];

  InitPath;
  InitClock;
  InitTrain;

  CalcTrain1(0,0); // это чтобы определить t1, t2, t3 и MaxTime
  MinTime := -17; 

  // удаляем статичные ступеньки  
//  HideObject('SUp');
//  HideObject('SDown');
end; // Init

procedure CalcClock(ClockNumber: integer; ZeroTime: extended);
var i: integer;
    td, dep: extended;
begin
  dep := 0;
  for i := 0 to TrainCount - 1 do begin
    td := Round(tArrive[i] + ZeroTime) + 0.5;
    if (t > td) and (td > dep) then
      dep := td;
  end;
  if dep <> 0 then
    tDeparture[ClockNumber] := dep;
end;

procedure GetInitPositions1;
var i: integer;
begin
  tArrive[0] := t - MaxTime - Period * Random(1);

  for i := 1 to TrainCount - 1 do
    tArrive[i] := tArrive[i - 1] + (Period + Period/4 * (Random(1) - 0.5));

  // распределяем, кого на верхние рельсы, кого на нижние
  for i := 0 to TrainCount - 1 do
    TrainStatus[i] := Random(2); // 0 или 1

  // часы - вызываем, чтобы не было пустышек
  CalcClock(0, StopTime + 3);
  CalcClock(1, t3 + StopTime + 3);
end; // GetInitPositions

procedure GetPositionAbovePeriod1;
var i: integer;
begin
  // переставляем поезда на возвратный путь
  for i := 0 to TrainCount - 1 do
    if (t > tArrive[i] + t2) and (TrainStatus[i] < 2) then
      TrainStatus[i] := TrainStatus[i] + 2;

  // если 1-й поезд дошёл до конца, убираем его, и выставляем очередной
  if t - tArrive[0] > MaxTime then begin
    // 2-й поезд переименовывается в 1-й и т.д.
    for i := 1 to TrainCount - 1 do begin 
      tArrive[i - 1] := tArrive[i];
      TrainStatus[i - 1] := TrainStatus[i];
    end;

    tArrive[TrainCount - 1] := tArrive[TrainCount - 2] + (Period + Period/4 * (Random(1) - 0.5));
    TrainStatus[TrainCount - 1] := Random(2); // 0 или 1

    // перескок через полночь
    if tArrive[TrainCount - 1] > 86400 then
      tArrive[TrainCount - 1] := tArrive[TrainCount - 1] - 86400;
  end;
end; // GetPositionAbovePeriod

procedure DrawSingleTrain1(TrainNumber, TrainStatus: integer; LeftOpened: Boolean; typ: integer);
var dDoor, LHead: extended;
    i, SegmentHead, SegmentTail: integer;
    Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1: extended;
    Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2: extended;
    Wheel3X, Wheel3Y, Wheel3Z, AngleXY3, AngleZ3: extended;
    dt: extended;
    StraightTrain: Boolean;
    PathNumber: integer;
begin
  dt := t - tArrive[TrainNumber];
  if dt > 80000 then // перескок через полночь
    dt := dt - 86400;

  if typ = 0 then
    dt := 3;

  if (dt < MinTime) or (dt > MaxTime) then
    exit;

  if TrainStatus = 0 then
    PathNumber := 3
  else if TrainStatus = 1 then
    PathNumber := 0
  else if TrainStatus = 2 then
    PathNumber := 1
  else if TrainStatus = 3 then
    PathNumber := 2;

  LHead := CalcTrain1(dt, typ);

  // обрезка
{  if (LHead > 0) and DoClipHead[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipHead[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(-1, 0, 0, 0);
    glPopMatrix;
  end else if (LHead < 0) and DoClipTail[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipTail[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(1, 0, 0, 0);
    glPopMatrix;
  end;}

  // при помощи коэффициентов приводим к масштабу
  LHead := -50 * LHead + Stops[TrainNumber];
  dDoor := CalcDoor(dt, typ) * 18;
  if dDoor = 0 then begin
    dDoor := CalcDoor(dt - t3, typ) * 18;
    if dDoor > 0 then
      LeftOpened := True;
  end;

  // определяем, рисовать ли поезд повагонно, или целиком.
  StraightTrain := NodeCount = 2;
  if not StraightTrain then begin
    SegmentHead := Path2Segment(PathNumber, LHead - tel1[0] - WheelBase / 2);
    SegmentTail := Path2Segment(PathNumber, LHead - tel2[VagonCount - 1] + WheelBase / 2);
    if SegmentTail = NodeCount * (TrainNumber + 1) - 1 then
      SegmentTail := NodeCount * (TrainNumber + 1) - 2;
    StraightTrain := SegmentHead = SegmentTail;
  end;

  if not StraightTrain then
    for i := 0 to VagonCount - 1 do begin
      // 1-я тележка
      CalcWheel(PathNumber, LHead - tel1[i] + WheelBase / 2, Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
      CalcWheel(PathNumber, LHead - tel1[i] - WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      AngleXY1 := Arctan2(Wheel2Y - Wheel1Y, Wheel2X - Wheel1X) * 57.3;
      AngleZ1 := -Arctan2(Wheel2Z - Wheel1Z, sqrt(sqr(Wheel2X - Wheel1X) + sqr(Wheel2Y - Wheel1Y))) * 57.3;
      Wheel1X := (Wheel1X + Wheel2X) / 2;
      Wheel1Y := (Wheel1Y + Wheel2Y) / 2;
      Wheel1Z := (Wheel1Z + Wheel2Z) / 2;
      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Ezh.Tel');
      glPopMatrix;

      // 2-я тележка
      CalcWheel(PathNumber, LHead - tel2[i] + WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      CalcWheel(PathNumber, LHead - tel2[i] - WheelBase / 2, Wheel3X, Wheel3Y, Wheel3Z, AngleXY3, AngleZ3);
      AngleXY2 := Arctan2(Wheel3Y - Wheel2Y, Wheel3X - Wheel2X) * 57.3;
      AngleZ2 := -Arctan2(Wheel3Z - Wheel2Z, sqrt(sqr(Wheel3X - Wheel2X) + sqr(Wheel3Y - Wheel2Y))) * 57.3;
      Wheel2X := (Wheel2X + Wheel3X) / 2;
      Wheel2Y := (Wheel2Y + Wheel3Y) / 2;
      Wheel2Z := (Wheel2Z + Wheel3Z) / 2;
      glPushMatrix;
      glTranslatef(Wheel2X, Wheel2Y, Wheel2Z);
      glRotatef(AngleXY2, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(AngleZ2, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Ezh.Tel');
      glPopMatrix;

      // вагон
      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(Arctan2(Wheel1Y - Wheel2Y, Wheel1X - Wheel2X) * 57.3, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(-Arctan2(Wheel1Z - Wheel2Z, sqrt(sqr(Wheel1X - Wheel2X) + sqr(Wheel1Y - Wheel2Y))) * 57.3, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y

      if dDoor = 0 then
        Draw3dObject('Ezh.' + VagonName[i] + '.Closed')
      else begin
        if LeftOpened then begin
          // рисуем двери
          glTranslatef(dDoor, 0, 0); // Левая дверь
          Draw3dObject('Ezh.' + VagonName[i] + '.dverLL');
          glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
          Draw3dObject('Ezh.' + VagonName[i] + '.dverLR');
          glTranslatef(dDoor, 0, 0);
          // поезд
          Draw3dObject('Ezh.' + VagonName[i] + '.LeftOpened');
        end else begin
          // рисуем двери
          glTranslatef(dDoor, 0, 0); // Левая дверь
          Draw3dObject('Ezh.' + VagonName[i] + '.dverRR');
          glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
          Draw3dObject('Ezh.' + VagonName[i] + '.dverRL');
          glTranslatef(dDoor, 0, 0);
          // поезд
          Draw3dObject('Ezh.' + VagonName[i] + '.RightOpened');
        end;
      end;
      if i = VagonCount - 1 then begin
        glRotatef(180, 0, 0, 1);
        glTranslatef(376.6, 0, 0);
        Draw3dObject('Ezh.Driver'); // машинист
      end;
      glPopMatrix;
    end
  else begin
      // поезд
    CalcWheel(PathNumber, LHead - Tel1[0], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    glRotatef(-AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y

    if dDoor = 0 then
      Draw3dObject('Ezh.Train.Closed')
    else begin
      if LeftOpened then begin
        glTranslatef(dDoor, 0, 0);
        Draw3dObject('Ezh.dverLL'); // Левая дверь
        glTranslatef(-2 * dDoor, 0, 0);
        Draw3dObject('Ezh.dverLR'); // Правая дверь
        glTranslatef(dDoor, 0, 0);
        Draw3dObject('Ezh.Train.LeftOpened'); // поезд
      end else begin
        glTranslatef(dDoor, 0, 0);
        Draw3dObject('Ezh.dverRR'); // Левая дверь
        glTranslatef(-2 * dDoor, 0, 0);
        Draw3dObject('Ezh.dverRL'); // Правая дверь
        glTranslatef(dDoor, 0, 0);
        Draw3dObject('Ezh.Train.RightOpened'); // поезд
      end;
    end;

    glRotatef(180, 0, 0, 1);
    glTranslatef(0, 0, 0);
    glTranslatef(1524.6, 0, 0);
    Draw3dObject('Ezh.Driver'); // машинист


    glPopMatrix;
  end;

  // отключаем обрезку
//  if DoClip[TrainNumber] then
//  DisableClipPlane;
end; // DrawSingleTrain

var StartStatus: integer;
    i: integer;
    Hour: word;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;// * 10 mod 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);


//  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then
    GetInitPositions1
  else
    GetPositionAbovePeriod1;

  // часы
  CalcClock(0, StopTime + 3);
  CalcClock(1, t3 + StopTime + 3);

  DrawTrainClock(0);

  glPushMatrix;
  glRotatef(180, 0, 0, 1);
  glTranslatef(-1893, 1403, 0);
  DrawTrainClock(1);
  glPopMatrix;

  // поезда
  for i := 0 to TrainCount - 1 do
    DrawSingleTrain1(i, TrainStatus[i], False, 1);

//  DrawPath(24);

  StartStatus := 1;
end.