var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..1] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..1] of Boolean;
  LeftDoor: array[0..1] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, xs2, ys, ys2, zs, zs2: array[0..52] of extended; 
  PathLength, PathLength2: array[0..52] of extended;

{$I ToolsTrain.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := False;
    DoClipHead[i] := False;
    DoClipTail[i] := False;
  end;

  NodeCount := 53;
  xs[0]   := -2781; ys[0] := -211;  zs[0]  := 8;
  xs[1]   := -2662; ys[1] := -187;  zs[1]  := zs[0];
  xs[2]   := -2601; ys[2] := -175;  zs[2]  := zs[0];
  xs[3]   := -2540; ys[3] := -164;  zs[3]  := zs[0];
  xs[4]   := -2480; ys[4] := -153;  zs[4]  := zs[0];
  xs[5]   := -2418; ys[5] := -142;  zs[5]  := zs[0];
  xs[6]   := -2357; ys[6] := -132;  zs[6]  := zs[0];
  xs[7]   := -2297; ys[7] := -121;  zs[7]  := zs[0];
  xs[8]   := -2236; ys[8] := -111;  zs[8]  := zs[0];
  xs[9]   := -2175; ys[9] := -101;  zs[9]  := zs[0];
  xs[10]  := -2114; ys[10] := -91;  zs[10] := zs[0];
  xs[11]  := -2053; ys[11] := -82;  zs[11] := zs[0];
  xs[12]  := -1992; ys[12] := -73;  zs[12] := zs[0];
  xs[13]  := -1931; ys[13] := -63;  zs[13] := zs[0];
  xs[14]  := -1870; ys[14] := -55;  zs[14] := zs[0];
  xs[15]  := -1809; ys[15] := -46;  zs[15] := zs[0];
  xs[16]  := -1747; ys[16] := -38;  zs[16] := zs[0];
  xs[17]  := -1686; ys[17] := -30;  zs[17] := zs[0];
  xs[18]  := -1625; ys[18] := -22;  zs[18] := zs[0];
  xs[19]  := -1562; ys[19] := -14;  zs[19] := zs[0];
  xs[20]  := -1501; ys[20] := -7;   zs[20] := zs[0];
  xs[21]  := -1441; ys[21] := 0;    zs[21] := zs[0];
  xs[22]  := -1379; ys[22] := 7;    zs[22] := zs[0];
  xs[23]  := -1317; ys[23] := 14;   zs[23] := zs[0];
  xs[24]  := -1256; ys[24] := 20;   zs[24] := zs[0];
  xs[25]  := -1194; ys[25] := 26;   zs[25] := zs[0];
  xs[26]  := -1134; ys[26] := 32;   zs[26] := zs[0];
  xs[27]  := -1072; ys[27] := 37;   zs[27] := zs[0];
  xs[28]  := -1010; ys[28] := 44;   zs[28] := zs[0];
  xs[29]  := -949;  ys[29] := 49;   zs[29] := zs[0];
  xs[30]  := -887;  ys[30] := 54;   zs[30] := zs[0];
  xs[31]  := -825;  ys[31] := 59;   zs[31] := zs[0];
  xs[32]  := -764;  ys[32] := 63;   zs[32] := zs[0];
  xs[33]  := -703;  ys[33] := 67;   zs[33] := zs[0];
  xs[34]  := -641;  ys[34] := 72;   zs[34] := zs[0];
  xs[35]  := -580;  ys[35] := 75;   zs[35] := zs[0];
  xs[36]  := -517;  ys[36] := 78;   zs[36] := zs[0];
  xs[37]  := -455;  ys[37] := 82;   zs[37] := zs[0];
  xs[38]  := -395;  ys[38] := 85;   zs[38] := zs[0];
  xs[39]  := -333;  ys[39] := 88;   zs[39] := zs[0];
  xs[40]  := -271;  ys[40] := 90;   zs[40] := zs[0];
  xs[41]  := -209;  ys[41] := 93;   zs[41] := zs[0];
  xs[42]  := -148;  ys[42] := 96;   zs[42] := zs[0];
  xs[43]  := -87;   ys[43] := 98;   zs[43] := zs[0];
  xs[44]  := -24;   ys[44] := 99;   zs[44] := zs[0];
  xs[45]  := 39;    ys[45] := 100;  zs[45] := zs[0];
  xs[46]  := 100;   ys[46] := 101;  zs[46] := zs[0];
  xs[47]  := 161;   ys[47] := 103;  zs[47] := zs[0];
  xs[48]  := 223;   ys[48] := 104;  zs[48] := zs[0];
  xs[49]  := 285;   ys[49] := 104;  zs[49] := zs[0];
  xs[50]  := 347;   ys[50] := 105;  zs[50] := zs[0];
  xs[51]  := 409;   ys[51] := 105;  zs[51] := zs[0];
  xs[52]  := 1075;  ys[52] := 105;  zs[52] := zs[0];
  Stops[0] := 15;
  Clocks[0] := 0;
  LeftDoor[0] := False;

  for i := 0 to NodeCount - 1 do begin
    xs2[i] := xs[NodeCount - 1 - i];
    ys2[i] := ys[NodeCount - 1 - i];
    zs2[i] := zs[NodeCount - 1 - i];
  end;
  LeftDoor[1] := True;

  Stops[1] := 12;
  Clocks[1] := 0;
  
  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;
  
  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 2; // количество часов и поездов
  VagonCount := 4;
  StopTime := 20;        // остановка - 20 секунд
  
  InitPath;
//  InitClock;
  InitTrain;
  
  // удаляем статичные ступеньки  
  HideObject('shlag1');
  HideObject('shlag2');
  HideObject('red1');
  HideObject('red2');
  HideObject('red3');
  HideObject('red4');
end; // Init

var StartStatus: integer;
    i, CurrentPath: integer;
    Hour: word;
    AngleSh: integer;
    CurrentSet, Semaphore: Boolean;
    dt: extended;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

  if StartStatus = 0 then begin
    GetInitPositions;

    CurrentPath := Random(TrainCount);
    tArrive[CurrentPath] := tArrive[0];
    CurrentSet := True;
  end else begin
    GetPositionAbovePeriod;

    if t > tArrive[0] then
      CurrentSet := False
    else if not CurrentSet then begin
      CurrentPath := Random(TrainCount);
      tArrive[CurrentPath] := tArrive[0];
      CurrentSet := True;
    end;
  end;

  // рисуем поезда
  DrawTrain(CurrentPath, LeftDoor[CurrentPath], 1);
//  DrawPath(20);

  dt := t - tArrive[0];

  // шлагбаум и светофор
  if CurrentPath = 0 then begin
    if dt > -2 then 
      AngleSh := 0
    else if dt > -4 then 
      AngleSh := 90 - (-cos((dt + 4) * 3.14/2) + 1) * 45
    else if dt > -38 then 
      AngleSh := 90
    else if dt > -40 then 
      AngleSh := (-cos((dt + 40) * 3.14 / 2) + 1) * 45
    else
      AngleSh := 0;
    if (dt > -50) and (dt < -2) then
      Semaphore := True
    else
      Semaphore := False;
  end else begin
    if dt > 38 then 
      AngleSh := 0
    else if dt > 36 then 
      AngleSh := 90 - (-cos((dt - 36) * 3.14/2) + 1) * 45
    else if dt > 2 then 
      AngleSh := 90
    else if dt > 0 then 
      AngleSh := (-cos(dt * 3.14 / 2) + 1) * 45
    else
      AngleSh := 0;
    if (dt > -10) and (dt < 38) then
      Semaphore := True
    else
      Semaphore := False;
  end;

  // шлагбаум №1
  glPushMatrix;
  glTranslatef(856, 0, 16);
  glRotatef(-AngleSh, 0, 1, 0);
  glTranslatef(-856, 0, -16);
  Draw3dObject('shlag1');
  glPopMatrix;

  // шлагбаум №2
  glPushMatrix;
  glTranslatef(562, 0, 16);
  glRotatef(AngleSh, 0, 1, 0);
  glTranslatef(-562, 0, -16);
  Draw3dObject('shlag2');
  glPopMatrix;

  // светофоры
  if Semaphore then begin
    if Round(t * 2) mod 2 = 1 then begin
      Draw3dObject('red1');
      Draw3dObject('red3');
    end else begin
      Draw3dObject('red2');
      Draw3dObject('red4');
    end;
  end;

  StartStatus := 1;
end.