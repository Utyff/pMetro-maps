var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..1] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..1] of Boolean;
  LeftDoor: array[0..1] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, xs2, ys, ys2, zs, zs2: array[0..1] of extended; 
  PathLength, PathLength2: array[0..1] of extended;

{$I ToolsSputnik.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := False;
    DoClipHead[i] := False;
    DoClipTail[i] := False;
  end;

  NodeCount := 2;
  xs[0] := 505.2; ys[0] := -10658; zs[0] := 1091;
  xs[1] := 2920.2; ys[1] := -4924; zs[1] :=  zs[0];
  Stops[0] := 0.6;
  LeftDoor[0] := False;

  xs2[0] := 221; ys2[0] := -10537; zs2[0] :=  zs[0];
  xs2[1] := 2636; ys2[1] := -4803; zs2[1] :=  zs2[0];
  Stops[1] := 0.6;
  LeftDoor[1] := True;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 2; // количество часов и поездов
  VagonCount := 4;
  StopTime := 60;        // остановка - 60 секунд

  InitPath;
//  InitClock;
  InitTrain;

  // удаляем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');
end; // Init

procedure DrawPantograf(L, H, AngleD, AngleD1, AngleU: extended);
var x, z: extended;
begin
//h := 0;
  // верхний полоз
  glPushMatrix;
  glTranslatef(L, 0, H);
  Draw3dObject('Sputnik.MotorVagon.Poloz');
  glPopMatrix;

  // нижний толстый
  x := -578.4;
  z := 151.7;
  glPushMatrix;
  glTranslatef(x, 0, z);
  glRotatef(AngleD * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Sputnik.MotorVagon.PanD');
  glPopMatrix;

  // нижний тонкий
  x := -569.3;
  z := 149.5;
  glPushMatrix;
  glTranslatef(x, 0, z);
  glRotatef(AngleD1 * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Sputnik.MotorVagon.PanD1');
  glPopMatrix;

  // верхний
  x := -578.3;
  z := 186.3;
  glPushMatrix;
  glTranslatef(x + L, 0, z + H);
  glRotatef(-AngleU * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Sputnik.MotorVagon.PanU');
  glPopMatrix;
end; // DrawPantograf

procedure DrawPantografs(part: extended);
var AngleD, AngleD1, AngleU, 
    x01, z01,
    x02, z02,
    x03, z03,
    x3, z3,
    x04, z04,
    x4, z4,
    x05, z05,
    x5, z5,
    r23, r24, r34, r35, a, b,
    H: extended;
begin
  glPushMatrix;

  x01 := -578.45;
  z01 := 151.8;
  x02 := -569.3;
  z02 := 149.6;
  x03 := -550.15;
  z03 := 166.23;
  x04 := -546.45;
//  z04 := 163.55;
  z04 := 164.025;
  x05 := -578.4;
  z05 := 186.3;


  r24 := sqrt((x04 - x02) ^ 2 + (z04 - z02) ^ 2);
  r34 := sqrt((x04 - x03) ^ 2 + (z04 - z03) ^ 2);
  r35 := sqrt((x05 - x03) ^ 2 + (z05 - z03) ^ 2);


//  Part := 1;
  AngleD := -part * 0.47;

  x3 := x01 + (x03 - x01) * cos(AngleD) - (z03 - z01) * sin(AngleD);
  z3 := z01 + (z03 - z01) * cos(AngleD) + (x03 - x01) * sin(AngleD);

//  DrawSphere(x3, 0, z3, 1);

  r23 := sqrt((x3 - x02) ^ 2 + (z3 - z02) ^ 2);
  a := (r34 ^ 2 - r24 ^ 2 + r23 ^ 2) / 2 / r23;
  h := sqrt(r34 ^ 2 - a ^ 2);

  x4 := x3 + a * (x02 - x3) / r23;
  z4 := z3 + a * (z02 - z3) / r23;

  x4 := x4 + h * (z3 - z02) / r23;
  z4 := z4 - h * (x3 - x02) / r23;

  AngleD1 := ArcSin(((x4 - x02) * (z04 - z02) - (z4 - z02) * (x04 - x02)) / r24 ^ 2);

//  DrawSphere(x4, 0, z4, 1);

  a := ((x4 - x3) * (x04 - x03) + (z4 - z3) * (z04 - z03)) / r34 ^ 2;
//ShowMessage(FloatToStr(a));
  b := ((x4 - x3) * (z04 - z03) - (z4 - z3) * (x04 - x03)) / r34 ^ 2;

  x5 := x3 + a * (x05 - x03) + b * (z05 - z03);
  z5 := z3 - b * (x05 - x03) + a * (z05 - z03);

//  DrawSphere(x5, 0, z5, 1);

  AngleU := ArcSin(((x5 - x3) * (z05 - z03) - (z5 - z3) * (x05 - x03)) / r35 ^ 2);


{  y1 := ld * sin(ad0 - AngleD);
  x1 := base / 2 + ld * cos(ad0 - AngleD);
  AngleU := ArcCos(x1 / lu);
  H := y1 + lu * sin(AngleU) - ld * sin(ad0) - lu * sin(au0);}

  DrawPantograf(x5 - x05, z5 - z05, -AngleD, AngleD1, -AngleU);
  glRotatef(180, 0, 0, 1);
  glTranslatef(2026.8, 0, 0);
  DrawPantograf(x5 - x05, z5 - z05, -AngleD, AngleD1, -AngleU);
  glPopMatrix;
end; // DrawPantografs

procedure DrawTrain1(TrainNumber: integer; LeftOpened: Boolean; typ: integer);
var dt, dDoorX, dDoorY, dDoorZ, LHead, dPan: extended;
    i, SegmentHead, SegmentTail: integer;
    Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1: extended;
    Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2: extended;
    Wheel3X, Wheel3Y, Wheel3Z, AngleXY3, AngleZ3: extended;
    StraightTrain: Boolean;
begin
  dt := t - tArrive[TrainNumber];

  if typ = 0 then
    dt := 3;

  if (dt > StopTime + 30) or (dt < -33) then
    exit;

//  LHead := CalcTrain(dt, typ);
  // рассчитываем торможение, стоянку и разгон. Стоянка - с 0-й до 6-й сек.
  // 0 - поезд стоит на платформе
  if typ = 0 then
    LHead := 0
  else if (typ = 1) or (typ = 2) then begin
    if dt < -4 then
      LHead := 4 * dt + 8
    else if dt < 0 then
      LHead := - dt ^ 2 / 2
    else if dt < StopTime then
      LHead := 0               // стоянка
    else if dt < StopTime + 9 then
      LHead := (dt - StopTime) ^ 1.5 // разгон
    else
      LHead :=  4.5 * (dt - StopTime - 9) + 9 ^ 1.5;
    if (typ = 2) and (LHead < 0) then
      LHead := -LHead;
  end;

  // рассчитываем положение пантографа 0 - поднят, 1 - опущен
  if dt < 20 then
    dPan := 0
  else if dt <= 21 then
    dPan := (dt - 20) ^ 2
  else if dt <= 38 then
    dPan := 1
  else if dt <= 39 then
    dPan := 1 - (dt - 38) ^ 2
  else
    dPan := 0;
//  dPan := (sin(t * 1) + 1) / 2; 

  // при помощи коэффициентов приводим к масштабу
  LHead := -50 * LHead + Stops[TrainNumber];
  if dt < StopTime div 2 then
    CalcDoor(dt, 0.5, 19, dDoorX, dDoorY, dDoorZ, typ)
  else
    CalcDoor(dt, StopTime - 19, StopTime - 0.5, dDoorX, dDoorY, dDoorZ, typ);
  dDoorX := dDoorX * 22;
  dDoorY := dDoorY * 22;
  dDoorZ := dDoorZ * 22;

  // определяем, рисовать ли поезд повагонно, или целиком.
  StraightTrain := NodeCount = 2;
  if not StraightTrain then begin
    SegmentHead := Path2Segment(TrainNumber, LHead - tel1[0] - WheelBase / 2);
    SegmentTail := Path2Segment(TrainNumber, LHead - tel2[VagonCount - 1] + WheelBase / 2);
    if SegmentTail = NodeCount * (TrainNumber + 1) - 1 then
      SegmentTail := NodeCount * (TrainNumber + 1) - 2;
    StraightTrain := SegmentHead = SegmentTail;
  end;

  if not StraightTrain then
    for i := 0 to VagonCount - 1 do begin
      // 1-я тележка
      CalcWheel(TrainNumber, LHead - tel1[i] + WheelBase / 2, Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
      CalcWheel(TrainNumber, LHead - tel1[i] - WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      AngleXY1 := Arctan2(Wheel2Y - Wheel1Y, Wheel2X - Wheel1X) * 57.3;
      AngleZ1 := -Arctan2(Wheel2Z - Wheel1Z, sqrt(sqr(Wheel2X - Wheel1X) + sqr(Wheel2Y - Wheel1Y))) * 57.3;
      Wheel1X := (Wheel1X + Wheel2X) / 2;
      Wheel1Y := (Wheel1Y + Wheel2Y) / 2;

      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Sputnik.HeadVagon.Tel1');
      glPopMatrix;

      // 2-я тележка
      CalcWheel(TrainNumber, LHead - tel2[i] + WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      CalcWheel(TrainNumber, LHead - tel2[i] - WheelBase / 2, Wheel3X, Wheel3Y, Wheel3Z, AngleXY3, AngleZ3);
      AngleXY2 := Arctan2(Wheel3Y - Wheel2Y, Wheel3X - Wheel2X) * 57.3;
      AngleZ2 := -Arctan2(Wheel3Z - Wheel2Z, sqrt(sqr(Wheel3X - Wheel2X) + sqr(Wheel3Y - Wheel2Y))) * 57.3;
      Wheel2X := (Wheel2X + Wheel3X) / 2;
      Wheel2Y := (Wheel2Y + Wheel3Y) / 2;
      glPushMatrix;
      glTranslatef(Wheel2X, Wheel2Y, Wheel2Z);
      glRotatef(AngleXY2, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(AngleZ2, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Sputnik.HeadVagon.Tel1');
      glPopMatrix;

      // вагон
      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(Arctan2(Wheel1Y - Wheel2Y, Wheel1X - Wheel2X) * 57.3, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(-Arctan2(Wheel1Z - Wheel2Z, sqrt(sqr(Wheel1X - Wheel2X) + sqr(Wheel1Y - Wheel2Y))) * 57.3, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y

      if (dDoorX = 0) and (dDoorY = 0) and (dDoorZ = 0) then
        Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.Closed')
      else begin
        if LeftOpened then begin
          // поезд
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.LeftOpened');

          // рисуем двери
          glTranslatef(dDoorX, dDoorY, dDoorZ); // Левая дверь
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.dverLL');
          glTranslatef(-2 * dDoorX, 0, 0); // Правая дверь
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.dverLR');
        end else begin
          // поезд
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.RightOpened');

          // рисуем двери
          glTranslatef(dDoorX, -dDoorY, dDoorZ); // Левая дверь
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.dverRR');
          glTranslatef(-2 * dDoorX, 0, 0); // Правая дверь
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.dverRL');
        end;
      end;
      glPopMatrix;
    end
  else begin
//    glPushMatrix;
      // поезд
    CalcWheel(TrainNumber, LHead, Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    glRotatef(-AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y

    if dPan <> 0 then begin
      Draw3dObject('Sputnik.Train.ClosedWOPantograf');
      DrawPantografs(dPan);
    end else if (dDoorX = 0) and (dDoorY = 0) and (dDoorZ = 0) then
      Draw3dObject('Sputnik.Train.Closed')
    else begin
      if LeftOpened then begin
        // поезд
        Draw3dObject('Sputnik.Train.LeftOpened');
        // двери
        glTranslatef(dDoorX, dDoorY, dDoorZ); // Левая дверь
        Draw3dObject('Sputnik.dverLL');
        glTranslatef(-2 * dDoorX, 0, 0); // Правая дверь
        Draw3dObject('Sputnik.dverLR');
      end else begin
        // поезд
        Draw3dObject('Sputnik.Train.RightOpened');
        // двери
        glTranslatef(dDoorX, -dDoorY, dDoorZ); // Левая дверь
        Draw3dObject('Sputnik.dverRR');
        glTranslatef(-2 * dDoorX, 0, 0); // Правая дверь
        Draw3dObject('Sputnik.dverRL');
      end;
    end;

    glPopMatrix;
  end;

  // отключаем обрезку
//  if DoClip[TrainNumber] then
//  DisableClipPlane;
end; // DrawTrain1

var StartStatus: integer;
    i, CurrentPath: integer;
    Hour: word;
    CurrentSet: Boolean;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

//  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then begin
    GetInitPositions;

    CurrentPath := Random(TrainCount);
    tArrive[CurrentPath] := tArrive[0];
    CurrentSet := True;
  end else begin
    GetPositionAbovePeriod;

    if t > tArrive[0] then
      CurrentSet := False
    else if not CurrentSet then begin
      CurrentPath := Random(TrainCount);
      tArrive[CurrentPath] := tArrive[0];
      CurrentSet := True;
    end;
  end;


  // рисуем поезд
  DrawTrain1(CurrentPath, LeftDoor[CurrentPath], 2);
//  DrawPath(24);

  StartStatus := 1;
end.