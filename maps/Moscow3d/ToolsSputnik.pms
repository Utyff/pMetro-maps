var
  // часы
  Digit, ySlide: array[0..8] of integer; 

  // вагоны
  VagonCount: integer;
  tel1, tel2: array[0..3] of integer;
  VagonName: array[0..3] of string;
  WheelBase: extended;

  t: single;
  StopTime: integer;
  Period: integer;


function Path2Segment(TrainNumber: integer; L: extended): integer;
var LCalc, HCalc, iCalc: integer;
begin
  //PathLength и PathLength2 - это единый массив, поэтому если TrainNumber=1 добавл€ем NodeCount к SFrom, STo
  LCalc := NodeCount * TrainNumber;
  HCalc := (NodeCount - 1) + NodeCount * TrainNumber;

  // ищем, в каком сегменте половинным делением
  if PathLength[HCalc] <= L then
    LCalc := HCalc;
  while LCalc < HCalc - 1 do begin
    iCalc := (LCalc + HCalc) shr 1;
    if PathLength[iCalc] <= L then
      LCalc := iCalc
    else
      HCalc := iCalc;
  end;
  Result := LCalc;

//    Result := Result - NodeCount * TrainNumber;
end; // Path2Segment

function Segment2Path(TrainNumber: integer; Segment: extended): extended;
var iSegment: integer;
    SegmentPart: extended;
begin
  iSegment := Trunc(Segment);
  if iSegment < 0 then
    iSegment := 0
  else if iSegment > NodeCount - 1 then
    iSegment := NodeCount - 1;
  SegmentPart := Segment - iSegment;

  if (iSegment <= (TrainNumber + 1) * NodeCount - 1) or (SegmentPart <= 0) then
    Result := PathLength[iSegment + TrainNumber * NodeCount] + SegmentPart * (PathLength[iSegment + 1 + TrainNumber * NodeCount] - PathLength[iSegment + TrainNumber * NodeCount])
  else
    Result := PathLength[iSegment + TrainNumber * NodeCount] + SegmentPart * (PathLength[iSegment + TrainNumber * NodeCount] - PathLength[iSegment - 1 + TrainNumber * NodeCount]);
end; // Segment2Path

procedure InitTrain();
var HeadWheelShift, VagonLength, VagonWheelBase: extended;
begin
  WheelBase := 80;

  // координаты тележек
  tel1[0] := 0;
  tel2[0] := -365.8;

  tel1[1] := -554.2;
  tel2[1] := -920;

  tel1[2] := -1107;
  tel2[2] := -1472.7;

  tel1[3] := -1661.3;
  tel2[3] := -2027.2;

  VagonName[0] := 'Head';
  VagonName[1] := 'Motor';
  VagonName[2] := 'RMotor';
  VagonName[3] := 'RHead';
end; // InitTrain

function GetPeriod(Hour: integer): integer;
var P: integer;
begin
  // период между поездами по часам в сутках
  if      Hour < 2 then  P := 20
  else if Hour < 5 then  P := 10000
  else if Hour < 7 then  P := 10
  else if Hour < 10 then P := 5
  else if Hour < 17 then P := 10
  else if Hour < 20 then P := 5
  else if Hour < 21 then P := 10
  else if Hour < 22 then P := 10
  else                   P := 10;

  Result := P * 60; // переводим минуты в секунды
end; // GetPeriod

procedure CalcWheel(TrainNumber: integer; 
                    L: extended;
                    var WheelX: extended;
                    var WheelY: extended;
                    var WheelZ: extended;
                    var AngleXY: extended;
                    var AngleZ: extended);
var Segment: integer;
    SegmentPart: extended;
begin
  // ищем, в каком сегменте
  Segment := Path2Segment(TrainNumber, L);
  // рассчитываем долю сегмента
  if (Segment + 1) mod NodeCount = 0 then begin
    SegmentPart := (L - PathLength[Segment]) / (PathLength[Segment] - PathLength[Segment - 1]);
    WheelX := Xs[Segment] + SegmentPart * (Xs[Segment] - Xs[Segment - 1]);
    WheelY := Ys[Segment] + SegmentPart * (Ys[Segment] - Ys[Segment - 1]);
    WheelZ := Zs[Segment] + SegmentPart * (Zs[Segment] - Zs[Segment - 1]);
    AngleXY := Arctan2(Ys[Segment - 1] - Ys[Segment], Xs[Segment - 1] - Xs[Segment]) * 57.3;
    AngleZ := -Arctan2(Zs[Segment] - Zs[Segment - 1], sqrt(sqr(Xs[Segment] - Xs[Segment - 1]) + sqr(Ys[Segment] - Ys[Segment - 1]))) * 57.3;
  end else begin
    SegmentPart := (L - PathLength[Segment]) / (PathLength[Segment + 1] - PathLength[Segment]);
    WheelX := Xs[Segment] + SegmentPart * (Xs[Segment + 1] - Xs[Segment]);
    WheelY := Ys[Segment] + SegmentPart * (Ys[Segment + 1] - Ys[Segment]);
    WheelZ := Zs[Segment] + SegmentPart * (Zs[Segment + 1] - Zs[Segment]);
    AngleXY := Arctan2(Ys[Segment] - Ys[Segment + 1], Xs[Segment] - Xs[Segment + 1]) * 57.3;
    AngleZ := -Arctan2(Zs[Segment + 1] - Zs[Segment], sqrt(sqr(Xs[Segment + 1] - Xs[Segment]) + sqr(Ys[Segment + 1] - Ys[Segment]))) * 57.3;
  end;
end; // CalcWheel

// процедура рисует путь шариками, в тестовых цел€х
procedure DrawPath(r: integer);
var i, j: integer;
    X, Y, Z, AXY, AZ: extended;
begin
  for j := 0 to TrainCount - 1 do begin
    for i := 0 to NodeCount - 1 do
      DrawSphere(xs[i + j * NodeCount], ys[i + j * NodeCount], zs[i + j * NodeCount], r);
    if DoClipHead[j] then begin
      CalcWheel(j, ClipHead[j], X, Y, Z, AXY, AZ);
      glPushMatrix;
      glTranslatef(X, Y, Z);
      glRotatef(AXY, 0, 0, 1); // ѕоворачиваем сцену на угол вокруг оси Z
      EnableClipPlane(-1, 0, 0, 0);
      glPopMatrix;
      DrawSphere(X, Y, Z, r * 2);
    end;
    DisableClipPlane;
    if DoClipTail[j] then begin
      CalcWheel(j, ClipTail[j], X, Y, Z, AXY, AZ);
      glPushMatrix;
      glTranslatef(X, Y, Z);
      glRotatef(AXY, 0, 0, 1); // ѕоворачиваем сцену на угол вокруг оси Z
      EnableClipPlane(1, 0, 0, 0);
      glPopMatrix;
      DrawSphere(X, Y, Z, r * 2);
    end;
    DisableClipPlane;
  end;
end; // DrawPath

procedure CalcDoor(dt, OpenTime, CloseTime: extended;
                   var dDoorX: extended;
                   var dDoorY: extended;
                   var dDoorZ: extended;
                   typ: integer);
begin
  dDoorX := 0;
  dDoorY := 0;
  dDoorZ := 0;
  if typ = 3 then
    exit;
  if (dt <= OpenTime) or (dt >= CloseTime) then
    exit;

  // открытие и закрытие симметричны. dt смещаем к моменту открыти€/закрыти€
  if dt - OpenTime < CloseTime - dt then
    dt := dt - OpenTime
  else
    dt := CloseTime - dt;

  // рассчитываем положение дверей 0 - закрыто, 1 - открыто
  if dt < 1 then
    dDoorX := 0
  else if dt < 2 then
    dDoorX := (1 - cos((dt - 1) * pi / 2)) / 5
  else if (dt <= 4) then
    dDoorX := 1 + (dt - 4) * 0.4
  else 
    dDoorX := 1;

// отход от вагона
  if dt <= 1 then
    dDoorY := 0
  else if dt <= 2 then
    dDoorY := sin((dt - 1) * pi / 2) / 5
  else
    dDoorY := 1 / 5;


// движение по вертикали

  if dt <= 1 then
    dDoorZ := - dt ^ 2 / 30
  else 
    dDoorZ := -1 / 30;
end; // CalcDoor

function CalcTrain(dt: extended; typ: integer): extended;
// typ: 0 - стоит на платформе, 1 - обычный, 2 - обратный, т.е. тупик, 3 - проходной
var L: extended;
begin
  // рассчитываем торможение, сто€нку и разгон. —то€нка - с 0-й до 6-й сек.
  if typ = 0 then
    L := 0
  else if (typ = 1) or (typ = 2) then begin
    if dt < -3 then
      L := - dt ^ 2 - 2 * dt - 5
    else if dt < -2 then
      L := 4 * dt + 4
    else if dt < 0 then
      L := - dt ^ 2
    else if dt < StopTime then
      L := 0               // сто€нка
    else
      L := (dt - StopTime) ^ 1.5; // разгон
    if (typ = 2) and (L < 0) then
      L := -L;
  end else if typ = 3 then
    L := 4 * dt + 4;
  Result := L;
end; // CalcTrain

procedure DrawTrain(TrainNumber: integer; LeftOpened: Boolean; typ: integer);
var dt, dDoorX, dDoorY, dDoorZ, LHead: extended;
    i, SegmentHead, SegmentTail: integer;
    Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1: extended;
    Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2: extended;
    Wheel3X, Wheel3Y, Wheel3Z, AngleXY3, AngleZ3: extended;
    StraightTrain: Boolean;
begin
  dt := t - tArrive[TrainNumber];

  if typ = 0 then
    dt := 3;

  if (dt < -11) or (dt > 40) then
    exit;

  // запоминаем, когда поезд отправилс€, дл€ часов
  if (dt > StopTime + 3) and (tDeparture[TrainNumber] < tArrive[TrainNumber]) then
    tDeparture[TrainNumber] := Round(t) + 0.5;

  LHead := CalcTrain(dt, typ);

  // обрезка
{  if (LHead > 0) and DoClipHead[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipHead[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // ѕоворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(-1, 0, 0, 0);
    glPopMatrix;
  end else if (LHead < 0) and DoClipTail[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipTail[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // ѕоворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(1, 0, 0, 0);
    glPopMatrix;
  end;}

  // при помощи коэффициентов приводим к масштабу
  LHead := -50 * LHead + Stops[TrainNumber];
  CalcDoor(dt, 0.5, StopTime - 0.5, dDoorX, dDoorY, dDoorZ, typ);
  dDoorX := dDoorX * 22;
  dDoorY := dDoorY * 22;
  dDoorZ := dDoorZ * 22;

  // определ€ем, рисовать ли поезд повагонно, или целиком.
  StraightTrain := NodeCount = 2;
  if not StraightTrain then begin
    SegmentHead := Path2Segment(TrainNumber, LHead - tel1[0] - WheelBase / 2);
    SegmentTail := Path2Segment(TrainNumber, LHead - tel2[VagonCount - 1] + WheelBase / 2);
    if SegmentTail = NodeCount * (TrainNumber + 1) - 1 then
      SegmentTail := NodeCount * (TrainNumber + 1) - 2;
    StraightTrain := SegmentHead = SegmentTail;
  end;

  if not StraightTrain then
    for i := 0 to VagonCount - 1 do begin
      // 1-€ тележка
      CalcWheel(TrainNumber, LHead - tel1[i] + WheelBase / 2, Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
      CalcWheel(TrainNumber, LHead - tel1[i] - WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      AngleXY1 := Arctan2(Wheel2Y - Wheel1Y, Wheel2X - Wheel1X) * 57.3;
      AngleZ1 := -Arctan2(Wheel2Z - Wheel1Z, sqrt(sqr(Wheel2X - Wheel1X) + sqr(Wheel2Y - Wheel1Y))) * 57.3;
      Wheel1X := (Wheel1X + Wheel2X) / 2;
      Wheel1Y := (Wheel1Y + Wheel2Y) / 2;

      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(AngleXY1, 0, 0, 1); // ѕоворачиваем сцену на угол вокруг оси Z
      glRotatef(AngleZ1, 0, 1, 0); // ѕоворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Sputnik.HeadVagon.Tel1');
      glPopMatrix;

      // 2-€ тележка
      CalcWheel(TrainNumber, LHead - tel2[i] + WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      CalcWheel(TrainNumber, LHead - tel2[i] - WheelBase / 2, Wheel3X, Wheel3Y, Wheel3Z, AngleXY3, AngleZ3);
      AngleXY2 := Arctan2(Wheel3Y - Wheel2Y, Wheel3X - Wheel2X) * 57.3;
      AngleZ2 := -Arctan2(Wheel3Z - Wheel2Z, sqrt(sqr(Wheel3X - Wheel2X) + sqr(Wheel3Y - Wheel2Y))) * 57.3;
      Wheel2X := (Wheel2X + Wheel3X) / 2;
      Wheel2Y := (Wheel2Y + Wheel3Y) / 2;
      glPushMatrix;
      glTranslatef(Wheel2X, Wheel2Y, Wheel2Z);
      glRotatef(AngleXY2, 0, 0, 1); // ѕоворачиваем сцену на угол вокруг оси Z
      glRotatef(AngleZ2, 0, 1, 0); // ѕоворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Sputnik.HeadVagon.Tel1');
      glPopMatrix;

      // вагон
      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(Arctan2(Wheel1Y - Wheel2Y, Wheel1X - Wheel2X) * 57.3, 0, 0, 1); // ѕоворачиваем сцену на угол вокруг оси Z
      glRotatef(-Arctan2(Wheel1Z - Wheel2Z, sqrt(sqr(Wheel1X - Wheel2X) + sqr(Wheel1Y - Wheel2Y))) * 57.3, 0, 1, 0); // ѕоворачиваем сцену на угол вокруг оси Y

      if (dDoorX = 0) and (dDoorY = 0) and (dDoorZ = 0) then
        Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.Closed')
      else begin
        if LeftOpened then begin
          // поезд
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.LeftOpened');

          // рисуем двери
          glTranslatef(dDoorX, dDoorY, dDoorZ); // Ћева€ дверь
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.dverLL');
          glTranslatef(-2 * dDoorX, 0, 0); // ѕрава€ дверь
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.dverLR');
        end else begin
          // поезд
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.RightOpened');

          // рисуем двери
          glTranslatef(dDoorX, -dDoorY, dDoorZ); // Ћева€ дверь
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.dverRR');
          glTranslatef(-2 * dDoorX, 0, 0); // ѕрава€ дверь
          Draw3dObject('Sputnik.' + VagonName[i] + 'Vagon.dverRL');
        end;
      end;
      glPopMatrix;
    end
  else begin
//    glPushMatrix;
      // поезд
    CalcWheel(TrainNumber, LHead, Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // ѕоворачиваем сцену на угол вокруг оси Z
    glRotatef(-AngleZ1, 0, 1, 0); // ѕоворачиваем сцену на угол вокруг оси Y

    if (dDoorX = 0) and (dDoorY = 0) and (dDoorZ = 0) then
      Draw3dObject('Sputnik.Train.Closed')
    else begin
      if LeftOpened then begin
        // поезд
        Draw3dObject('Sputnik.Train.LeftOpened');
        // двери
        glTranslatef(dDoorX, dDoorY, dDoorZ); // Ћева€ дверь
        Draw3dObject('Sputnik.dverLL');
        glTranslatef(-2 * dDoorX, 0, 0); // ѕрава€ дверь
        Draw3dObject('Sputnik.dverLR');
      end else begin
        // поезд
        Draw3dObject('Sputnik.Train.RightOpened');
        // двери
        glTranslatef(dDoorX, -dDoorY, dDoorZ); // Ћева€ дверь
        Draw3dObject('Sputnik.dverRR');
        glTranslatef(-2 * dDoorX, 0, 0); // ѕрава€ дверь
        Draw3dObject('Sputnik.dverRL');
      end;
    end;

    glPopMatrix;
  end;

  // отключаем обрезку
//  if DoClip[TrainNumber] then
//  DisableClipPlane;
end; // DrawTrain

procedure GetInitPositions;
var i: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    tDeparture[i] := Round(t - Period * Random(1));
    tArrive[i] := tDeparture[i] - StopTime - 3;
  end;
end; // GetInitPositions

procedure GetPositionAbovePeriod;
var i: integer;
begin
  for i := 0 to TrainCount - 1 do
    if t > tArrive[i] + StopTime / 2 + Period / 2 then
      tArrive[i] := Round(tArrive[i] + Period + (Random(1) * 2 - 1) * Period * 0.25)
    else if t < tArrive[i] - Period then
      tArrive[i] := tArrive[i] - 86400;
end; // GetPositionAbovePeriod

procedure DrawTrains(LeftOpened: Boolean; typ: integer);
var i: integer;
begin
  for i := 0 to TrainCount - 1 do
    DrawTrain(i, LeftOpened, typ);
end; // DrawTrains
