var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..1] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..1] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, xs2, ys, ys2, zs, zs2: array[0..1] of extended; 
  PathLength, PathLength2: array[0..1] of extended;

{$I ToolsRusich.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := True;
    DoClipHead[i] := False;
    DoClipTail[i] := False;
  end;

  NodeCount := 2;
  xs[0]  := 1483; ys[0]  := -208.8;  zs[0] := 2.2;
  xs[1]  := -1429;  ys[1]  := ys[0];  zs[1] := zs[0];
  Stops[0] := 0.26;
  Clocks[0] := 0.2518;
//  ClipHead[0] := 0.1;
//  ClipTail[0] := 0.9;

  xs2[0] := xs[1]; ys2[0] := 208.7; zs2[0] := zs[0];
  xs2[1] := xs[0];  ys2[1] := ys2[0]; zs2[1] := zs[0];
                   
  Stops[1] := 0.26;
  Clocks[1] := 0.2337;
//  ClipHead[1] := 0.1;
//  ClipTail[1] := 0.9;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 2; // количество часов и поездов
  VagonCount := 4;
  StopTime := 10;        // остановка - 10 секунд

  InitPath;
  InitClock;
  InitTrain;

  // удаляем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');
end; // Init

procedure DrawClock1(Departure: integer);
var i: integer;
    Hour, Mn, sec, ms: word;
begin
  // рисуем часы
//exit;
  DecodeTime(Time, Hour, Mn, Sec, MS);

  Digit[0] := Hour div 10;
  Digit[1] := Hour mod 10;
  Digit[2] := Mn div 10;
  Digit[3] := Mn mod 10;
  Digit[4] := Sec div 10;
  Digit[5]:= Sec mod 10;

// время отправления предыдущего поезда - три последние цифры
  if (Departure >= 600) or (Departure < 0) then begin
    Digit[6] := -1;
    Digit[7] := -1;
    Digit[8]:= -1;
  end else begin
    Mn := Departure div 60;
    Departure := Departure mod 60;
    Digit[6] := Mn;
    Digit[7] := Departure div 10;
    Digit[8]:= Departure mod 10;
  end;

//  Draw3dObject('Clock.ClockBody');
  Draw3dObject('Clock.Dots');

  // цифры
  glPushMatrix;
  for i := 0 to 8 do
    if (Digit[i] >= 0) and (Digit[i] <= 9) then begin
      glTranslatef(0, -ySlide[i], 0);
      Draw3dObject('Clock.Digit' + IntToStr(Digit[i]));
    end;
  glPopMatrix;
end; // DrawClock1

procedure DrawTrainClock1(TrainNumber: integer; dY: integer);
var Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1: extended;
begin
  // часы
  if ShowClock[TrainNumber] then begin
//ShowMessage('1');
    CalcWheel(TrainNumber, Clocks[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y + dY, Wheel1Z + 153);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    DrawClock1(t - tDeparture[TrainNumber]);
    glPopMatrix;
  end;
end; // DrawTrainClock



var StartStatus: integer;
    i: integer;
    Hour: word;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then
    GetInitPositions
  else
    GetPositionAbovePeriod;


  // рисуем поезда
  DrawSingleTrain(0, True, 1);
  DrawSingleTrain(1, True, 1);
//  DrawPath(24);

  DrawTrainClock1(0, 46);
  DrawTrainClock1(1, -46);

  StartStatus := 1;
end.