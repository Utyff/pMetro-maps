var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Clocks, ClipHead, ClipTail: array[0..1] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..1] of Boolean;
  Stops: array[0..1] of extended;
  LeftDoor: array[0..1] of Boolean;
  Types: array[0..1] of integer;

  // рельсы
  NodeCount: integer;
  xs, xs2, ys, ys2, zs, zs2: array[0..42] of extended; 
  PathLength, PathLength2: array[0..42] of extended;

  // пантограф
  ad0, au0, ld, lu, base: extended;

{$I ToolsTrain.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := False;
    DoClipHead[i] := False;
    DoClipTail[i] := False;
  end;

  NodeCount := 43;
  xs[0] := 631;  ys[0] :=-10716; zs[0] := 1091;
  xs[1] := 1934; ys[1] := -7621; zs[1] := zs[0];
  xs[2] := 1953; ys[2] := -7577; zs[2] := zs[0];
  xs[3] := 1983; ys[3] := -7506; zs[3] := zs[0];
  xs[4] := 2012; ys[4] := -7436; zs[4] := zs[0];
  xs[5] := 2044; ys[5] := -7360; zs[5] := zs[0];
  xs[6] := 2075; ys[6] := -7286; zs[6] := zs[0];
  xs[7] := 2107; ys[7] := -7211; zs[7] := zs[0];
  xs[8] := 2135; ys[8] := -7144; zs[8] := zs[0];
  xs[9] := 2168; ys[9] := -7068; zs[9] := zs[0];
  xs[10] := 2214; ys[10] := -6956; zs[10] := zs[0];
  xs[11] := 2247; ys[11] := -6888; zs[11] := zs[0];
  xs[12] := 2283; ys[12] := -6823; zs[12] := zs[0];
  xs[13] := 2326; ys[13] := -6755; zs[13] := zs[0];
  xs[14] := 2369; ys[14] := -6690; zs[14] := zs[0];
  xs[15] := 2415; ys[15] := -6623; zs[15] := zs[0];
  xs[16] := 2459; ys[16] := -6557; zs[16] := zs[0];
  xs[17] := 2503; ys[17] := -6487; zs[17] := zs[0];
  xs[18] := 2543; ys[18] := -6417; zs[18] := zs[0];
  xs[19] := 2581; ys[19] := -6345; zs[19] := zs[0];
  xs[20] := 2615; ys[20] := -6274; zs[20] := zs[0];
  xs[21] := 2650; ys[21] := -6198; zs[21] := zs[0];
  xs[22] := 2680; ys[22] := -6127; zs[22] := zs[0];
  xs[23] := 2712; ys[23] := -6055; zs[23] := zs[0];
  xs[24] := 2745; ys[24] := -5982; zs[24] := zs[0];
  xs[25] := 2778; ys[25] := -5912; zs[25] := zs[0];
  xs[26] := 2813; ys[26] := -5841; zs[26] := zs[0];
  xs[27] := 2848; ys[27] := -5770; zs[27] := zs[0];
  xs[28] := 2884; ys[28] := -5701; zs[28] := zs[0];
  xs[29] := 2921; ys[29] := -5630; zs[29] := zs[0];
  xs[30] := 2958; ys[30] := -5562; zs[30] := zs[0];
  xs[31] := 2997; ys[31] := -5493; zs[31] := zs[0];
  xs[32] := 3036; ys[32] := -5425; zs[32] := zs[0];
  xs[33] := 3076; ys[33] := -5356; zs[33] := zs[0];
  xs[34] := 3116; ys[34] := -5290; zs[34] := zs[0];
  xs[35] := 3158; ys[35] := -5222; zs[35] := zs[0];
  xs[36] := 3200; ys[36] := -5156; zs[36] := zs[0];
  xs[37] := 3243; ys[37] := -5090; zs[37] := zs[0];
  xs[38] := 3287; ys[38] := -5024; zs[38] := zs[0];
  xs[39] := 3332; ys[39] := -4959; zs[39] := zs[0];
  xs[40] := 3378; ys[40] := -4894; zs[40] := zs[0];
  xs[41] := 3423; ys[41] := -4831; zs[41] := zs[0];
  xs[42] := 7083; ys[42] := 199;   zs[42] := zs[0];
  Stops[0] := 41.1;                  
  LeftDoor[0] := True;
  Types[0] := 1;

  xs2[0] := 7357; ys2[0] := -0000; zs2[0] := zs[0];
  xs2[1] := 3696; ys2[1] := -5031; zs2[1] := zs[0];
  xs2[2] := 3650; ys2[2] := -5094; zs2[2] := zs[0];
  xs2[3] := 3605; ys2[3] := -5157; zs2[3] := zs[0];
  xs2[4] := 3559; ys2[4] := -5222; zs2[4] := zs[0];
  xs2[5] := 3513; ys2[5] := -5286; zs2[5] := zs[0];
  xs2[6] := 3468; ys2[6] := -5350; zs2[6] := zs[0];
  xs2[7] := 3422; ys2[7] := -5414; zs2[7] := zs[0];
  xs2[8] := 3377; ys2[8] := -5479; zs2[8] := zs[0];
  xs2[9] := 3332; ys2[9] := -5544; zs2[9] := zs[0];
  xs2[10] := 3287; ys2[10] := -5608; zs2[10] := zs[0];
  xs2[11] := 3242; ys2[11] := -5674; zs2[11] := zs[0];
  xs2[12] := 3199; ys2[12] := -5738; zs2[12] := zs[0];
  xs2[13] := 3155; ys2[13] := -5803; zs2[13] := zs[0];
  xs2[14] := 3110; ys2[14] := -5869; zs2[14] := zs[0];
  xs2[15] := 3067; ys2[15] := -5933; zs2[15] := zs[0];
  xs2[16] := 3023; ys2[16] := -5999; zs2[16] := zs[0];
  xs2[17] := 2979; ys2[17] := -6066; zs2[17] := zs[0];
  xs2[18] := 2936; ys2[18] := -6132; zs2[18] := zs[0];
  xs2[19] := 2894; ys2[19] := -6197; zs2[19] := zs[0];
  xs2[20] := 2851; ys2[20] := -6263; zs2[20] := zs[0];
  xs2[21] := 2808; ys2[21] := -6329; zs2[21] := zs[0];
  xs2[22] := 2766; ys2[22] := -6395; zs2[22] := zs[0];
  xs2[23] := 2723; ys2[23] := -6462; zs2[23] := zs[0];
  xs2[24] := 2680; ys2[24] := -6530; zs2[24] := zs[0];
  xs2[25] := 2639; ys2[25] := -6596; zs2[25] := zs[0];
  xs2[26] := 2598; ys2[26] := -6662; zs2[26] := zs[0];
  xs2[27] := 2556; ys2[27] := -6729; zs2[27] := zs[0];
  xs2[28] := 2515; ys2[28] := -6796; zs2[28] := zs[0];
  xs2[29] := 2474; ys2[29] := -6863; zs2[29] := zs[0];
  xs2[30] := 2433; ys2[30] := -6931; zs2[30] := zs[0];
  xs2[31] := 2394; ys2[31] := -6998; zs2[31] := zs[0];
  xs2[32] := 2355; ys2[32] := -7068; zs2[32] := zs[0];
  xs2[33] := 2317; ys2[33] := -7137; zs2[33] := zs[0];
  xs2[34] := 2281; ys2[34] := -7205; zs2[34] := zs[0];
  xs2[35] := 2245; ys2[35] := -7276; zs2[35] := zs[0];
  xs2[36] := 2210; ys2[36] := -7347; zs2[36] := zs[0];
  xs2[37] := 2175; ys2[37] := -7419; zs2[37] := zs[0];
  xs2[38] := 2143; ys2[38] := -7489; zs2[38] := zs[0];
  xs2[39] := 2111; ys2[39] := -7561; zs2[39] := zs[0];
  xs2[40] := 2080; ys2[40] := -7632; zs2[40] := zs[0];
  xs2[41] := 2063; ys2[41] := -7671; zs2[41] := zs[0];
  xs2[42] := 859;  ys2[42] := -10530;zs2[42] := zs[0];
                                       
  Stops[1] := 0.67;
  LeftDoor[1] := True;
  Types[1] := 1;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 2; // количество часов и поездов
  VagonCount := 4;
  StopTime := 60;        // остановка - 60 секунд

  InitPath;
//  InitClock;
  InitTrain;

  // удаляем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');

  // пантограф
  ad0 := 37.7 / 57.3; // начальный угол нижней рамы
  au0 := 30.4 / 57.3; // начальный угол верхней рамы
  ld := 30.9; // длина нижней рамы
  lu := 49.1; // длина верхней рамы
  base := 35.6; // длина базы
end; // Init

procedure DrawPantograf(H, AngleD, AngleU: extended);
var x, z: extended;
begin
//h := 0;
  // верхний полоз
  glPushMatrix;
  glTranslatef(0, 0, H);
  Draw3dObject('Train.MotorVagon.Poloz');
  glPopMatrix;

  // нижний правый
  x := -203.35;
  z := 144;
  glPushMatrix;
  glTranslatef(x, 0, z);
  glRotatef(AngleD * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanLD');
  glPopMatrix;

  // нижний левый
  x := -167.7;
  z := 144;
  glPushMatrix;
  glTranslatef(x, 0, z);
  glRotatef(-AngleD * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanRD');
  glPopMatrix;

  // верхний левый
  x := -185;
  z := 188;
  glPushMatrix;
  glTranslatef(x, 0, z + H);
  glRotatef(-AngleU * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanRU');
  glPopMatrix;

  // верхний правый
  x := -185;
  z := 188;
  glPushMatrix;
  glTranslatef(x, 0, z + H);
  glRotatef(AngleU * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanLU');
  glPopMatrix;
end; // DrawPantograf

procedure DrawPantografs(part: extended);
var AngleD, AngleU, x1, y1, H: extended;
begin
  AngleD := part * 0.6;

  y1 := ld * sin(ad0 - AngleD);
  x1 := base / 2 + ld * cos(ad0 - AngleD);
  AngleU := ArcCos(x1 / lu);
  H := y1 + lu * sin(AngleU) - ld * sin(ad0) - lu * sin(au0);

  DrawPantograf(H, -AngleD, -AngleU + au0);
  glRotatef(180, 0, 0, 1);
  glTranslatef(1299.6, 0, 0);
  DrawPantograf(H, -AngleD, -AngleU + au0);
end; // DrawPantografs

procedure DrawTrain1(TrainNumber: integer; LeftOpened: Boolean; typ: integer);
var dt, LHead, dDoor, dPan: extended;
    i, SegmentHead, SegmentTail: integer;
    Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1: extended;
    Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2: extended;
    Wheel3X, Wheel3Y, Wheel3Z, AngleXY3, AngleZ3: extended;
    StraightTrain: Boolean;
begin
  dt := t - tArrive[0];
//  dt := 25; // раскомментируй эту строку, чтобы зафиксировать поезда на платформе
  if (dt > StopTime + 40) or (dt < -45) then
    exit;

  // рассчитываем торможение, стоянку и разгон. Стоянка - с 0-й до 6-й сек.
  // 0 - поезд стоит на платформе
  if typ = 0 then
    LHead := 0
  else if (typ = 1) or (typ = 2) then begin
    if dt < -4 then
      LHead := 4 * dt + 8
    else if dt < 0 then
      LHead := - dt ^ 2 / 2
    else if dt < StopTime then
      LHead := 0               // стоянка
    else if dt < StopTime + 9 then
      LHead := (dt - StopTime) ^ 1.5 // разгон
    else
      LHead :=  4.5 * (dt - StopTime - 9) + 9 ^ 1.5;
    if (typ = 2) and (LHead < 0) then
      LHead := -LHead;
  end;

  // рассчитываем положение дверей 0 - закрыто, 1 - открыто
  if dt < 0.5 then
    dDoor := 0
  else if dt <= 1.5 then
    dDoor := (dt - 0.5) ^ 2
  else if dt <= 18 then
    dDoor := 1
  else if dt <= 19 then
    dDoor := 1 - (dt - 18) ^ 2
  else if dt < 41 then
    dDoor := 0
  else if dt <= 42 then
    dDoor := (dt - 41) ^ 2
  else if dt <= 58 then
    dDoor := 1
  else if dt <= 59 then
    dDoor := 1 - (dt - 58) ^ 2
  else
    dDoor := 0;

  // рассчитываем положение пантографа 0 - поднят, 1 - опущен
  if dt < 20 then
    dPan := 0
  else if dt <= 21 then
    dPan := (dt - 20) ^ 2
  else if dt <= 38 then
    dPan := 1
  else if dt <= 39 then
    dPan := 1 - (dt - 38) ^ 2
  else
    dPan := 0;

  // при помощи коэффициентов приводим к масштабу
  LHead := - LHead * 50 + Stops[TrainNumber];
  dDoor := dDoor * 14;

  // определяем, рисовать ли поезд повагонно, или целиком.
  StraightTrain := NodeCount = 2;
  if not StraightTrain then begin
    SegmentHead := Path2Segment(TrainNumber, LHead - tel1[0] - WheelBase / 2);
    SegmentTail := Path2Segment(TrainNumber, LHead - tel2[VagonCount - 1] + WheelBase / 2);
    if SegmentTail = NodeCount * (TrainNumber + 1) - 1 then
      SegmentTail := NodeCount * (TrainNumber + 1) - 2;
    StraightTrain := SegmentHead = SegmentTail;
  end;

  if not StraightTrain then
    for i := 0 to VagonCount - 1 do begin
      // 1-я тележка
      CalcWheel(TrainNumber, LHead - tel1[i] + WheelBase / 2, Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
      CalcWheel(TrainNumber, LHead - tel1[i] - WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      AngleXY1 := Arctan2(Wheel2Y - Wheel1Y, Wheel2X - Wheel1X) * 57.3;
      AngleZ1 := -Arctan2(Wheel2Z - Wheel1Z, sqrt(sqr(Wheel2X - Wheel1X) + sqr(Wheel2Y - Wheel1Y))) * 57.3;
      Wheel1X := (Wheel1X + Wheel2X) / 2;
      Wheel1Y := (Wheel1Y + Wheel2Y) / 2;

      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Train.HeadVagon.Tel2');
      glPopMatrix;

      // 2-я тележка
      CalcWheel(TrainNumber, LHead - tel2[i] + WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      CalcWheel(TrainNumber, LHead - tel2[i] - WheelBase / 2, Wheel3X, Wheel3Y, Wheel3Z, AngleXY3, AngleZ3);
      AngleXY2 := Arctan2(Wheel3Y - Wheel2Y, Wheel3X - Wheel2X) * 57.3;
      AngleZ2 := -Arctan2(Wheel3Z - Wheel2Z, sqrt(sqr(Wheel3X - Wheel2X) + sqr(Wheel3Y - Wheel2Y))) * 57.3;
      Wheel2X := (Wheel2X + Wheel3X) / 2;
      Wheel2Y := (Wheel2Y + Wheel3Y) / 2;
      glPushMatrix;
      glTranslatef(Wheel2X, Wheel2Y, Wheel2Z);
      glRotatef(AngleXY2, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(AngleZ2, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Train.HeadVagon.Tel2');
      glPopMatrix;

      // вагон
      glPushMatrix;
      glTranslatef(Wheel2X, Wheel2Y, Wheel2Z);
      glRotatef(Arctan2(Wheel1Y - Wheel2Y, Wheel1X - Wheel2X) * 57.3, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(-Arctan2(Wheel1Z - Wheel2Z, sqrt(sqr(Wheel1X - Wheel2X) + sqr(Wheel1Y - Wheel2Y))) * 57.3, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y

      if dDoor = 0 then
        Draw3dObject('Train.' + VagonName[i] + 'Vagon.Closed')
      else begin
        if LeftOpened then begin
          // поезд
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.LeftOpened');

          // рисуем двери
          glTranslatef(dDoor, 0, 0); // Левая дверь
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.dverLL');
          glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.dverLR');
        end else begin
          // поезд
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.RightOpened');

          // рисуем двери
          glTranslatef(dDoor, 0, 0); // Левая дверь
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.dverRR');
          glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.dverRL');
        end;
      end;
      glPopMatrix;
    end
  else begin
//    glPushMatrix;
      // поезд
    CalcWheel(TrainNumber, LHead - Tel2[0], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    glRotatef(-AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
    if dPan <> 0 then begin
      Draw3dObject('Train.Train.ClosedWOPantograf');
      DrawPantografs(dPan);
    end else if dDoor = 0 then
      Draw3dObject('Train.Train.Closed')
    else begin
      if LeftOpened then begin
        // поезд
        Draw3dObject('Train.Train.LeftOpened');
        // двери
        glTranslatef(dDoor, 0, 0); // Левая дверь
        Draw3dObject('Train.dverLL');
        glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
        Draw3dObject('Train.dverLR');
      end else begin
        // поезд
        Draw3dObject('Train.Train.RightOpened');
        // двери
        glTranslatef(dDoor, 0, 0); // Левая дверь
        Draw3dObject('Train.dverRR');
        glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
        Draw3dObject('Train.dverRL');
      end;
    end;

    glPopMatrix;
  end;
end; // DrawTrain1

var StartStatus: integer;
    i, CurrentPath: integer;
    Hour: word;
    CurrentSet: Boolean;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

//  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then begin
    GetInitPositions;

    CurrentPath := Random(TrainCount);
    tArrive[CurrentPath] := tArrive[0];
    CurrentSet := True;
  end else begin
    GetPositionAbovePeriod;

    if t > tArrive[0] then
      CurrentSet := False
    else if not CurrentSet then begin
      CurrentPath := Random(TrainCount);
      tArrive[CurrentPath] := tArrive[0];
      CurrentSet := True;
    end;
  end;

  // рисуем поезд
  DrawTrain1(CurrentPath, LeftDoor[CurrentPath], Types[CurrentPath]);

//  for i := 0 to TrainCount - 1 do
//    DrawTrain1(i, LeftDoor[i], Types[i]);
//  DrawPath(20);
  StartStatus := 1;
end.