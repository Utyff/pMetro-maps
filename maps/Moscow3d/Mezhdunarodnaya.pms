var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..1] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..1] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, xs2, ys, ys2, zs, zs2: array[0..9] of extended; 
  PathLength, PathLength2: array[0..9] of extended;

{$I ToolsRusich.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := True;
    DoClipHead[i] := True;
    DoClipTail[i] := True;
  end;

  NodeCount := 10;

  xs[0] := 1153; ys[0] := 359; zs[0] := 2.2;
  xs[1] := 558;  ys[1] := 259; zs[1] := zs[0];
  xs[2] := 505;  ys[2] := 251; zs[2] := zs[0];
  xs[3] := 432;  ys[3] := 241; zs[3] := zs[0];
  xs[4] := 360;  ys[4] := 233; zs[4] := zs[0];
  xs[5] := 286;  ys[5] := 226; zs[5] := zs[0];
  xs[6] := 213;  ys[6] := 222; zs[6] := zs[0];
  xs[7] := 140;  ys[7] := 219; zs[7] := zs[0];
  xs[8] := 66;   ys[8] := 219; zs[8] := zs[0];
  xs[9]  := -1815;   ys[9]  := 218; zs[9] := zs[0];
  Stops[0] := 3.7;
  Clocks[0] := 1.012;
  ClipHead[0] := 0.5;
  DoClipTail[0] := False;

  xs2[0] := 1225; ys2[0] := -72;  zs2[0] := zs[0];
  xs2[1] := 628;  ys2[1] := -171; zs2[1] := zs[0];
  xs2[2] := 570;  ys2[2] := -180; zs2[2] := zs[0];
  xs2[3] := 487;  ys2[3] := -192; zs2[3] := zs[0];
  xs2[4] := 403;  ys2[4] := -201; zs2[4] := zs[0];
  xs2[5] := 318;  ys2[5] := -209; zs2[5] := zs[0];
  xs2[6] := 235;  ys2[6] := -214; zs2[6] := zs[0];
  xs2[7] := 151;  ys2[7] := -217; zs2[7] := zs[0];
  xs2[8] := 66;   ys2[8] := -218; zs2[8] := zs[0];
  xs2[9]  := -1816;   ys2[9]  := -218.5; zs2[9]  := zs[0];
  Stops[1] := 3.8;
  Clocks[1] := 0.9985;
  ClipHead[1] := 0.5;
  DoClipTail[1] := False;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 2; // количество часов и поездов
  VagonCount := 4;
  StopTime := 10;        // остановка - 10 секунд

  InitPath;
  InitClock;
  InitTrain;

  // удаляем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');
end; // Init

var StartStatus: integer;
    i: integer;
    Hour: word;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then
    GetInitPositions
  else
    GetPositionAbovePeriod;


  // рисуем поезда
  DrawTrain(0, False, 2); //2
  DrawTrain(1, True, 2); //2
//  DrawPath(24);

  StartStatus := 1;
end.