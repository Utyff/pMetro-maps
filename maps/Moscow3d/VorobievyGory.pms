var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..1] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..1] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, xs2, ys, ys2, zs, zs2: array[0..2] of extended; 
  PathLength, PathLength2: array[0..2] of extended;

{$I ToolsNomernoy.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := True;
    DoClipHead[i] := True;
    DoClipTail[i] := True;
  end;

  NodeCount := 3;
  xs[0]  := 3427; ys[0]  := -170;  zs[0] := -48;
  xs[1]  := 2649;  ys[1]  := -170;  zs[1] := 2;
  xs[2]  := -3091;  ys[2]  := -170;  zs[2] := 2;
  Stops[0] := 1.13;
  Clocks[0] := 1.089;
  doClipHead[0] := False;
  doClipTail[0] := False;

  xs2[0] := -3091; ys2[0] := 170; zs2[0] := 2;
  xs2[1] := 2649;  ys2[1] := 170; zs2[1] := 2;
  xs2[2] := 3427;  ys2[2] := 170; zs2[2] := -48;
                   
  Stops[1] := 0.44;
  Clocks[1] := 0.403;
  doClipHead[1] := False;
  doClipTail[1] := False;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 2; // количество часов и поездов
  VagonCount := 3;
  StopTime := 8;        // остановка - 8 секунд

  InitPath;
  InitClock;
  InitTrain;

  // удаляем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');
end; // Init

var StartStatus: integer;
    i: integer;
    Hour: word;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then
    GetInitPositions
  else
    GetPositionAbovePeriod;


  // рисуем поезда
  DrawTrains(True, 1);
//  DrawPath(24);

  StartStatus := 1;
end.