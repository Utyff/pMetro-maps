var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Clocks, ClipHead, ClipTail: array[0..4] of extended;
  Stops: array[0..4] of extended;
  LeftDoor: array[0..4] of Boolean;
  Types: array[0..4] of integer;

  // рельсы
  NodeCount: integer;
  xs, xs2, xs3, xs4, xs5, 
  ys, ys2, ys3, ys4, ys5: array[0..34] of extended; 
  zs: extended; 
  PathLength, PathLength2, PathLength3, PathLength4, PathLength5: array[0..34] of extended;

  // пантограф
  ad0, au0, ld, lu, base: extended;

var
  // вагоны
  VagonCount: integer;
  tel1, tel2: array[0..3] of integer;
  VagonName: array[0..3] of string;
  WheelBase: extended;

  t: single;
  StopTime: integer;
  Period: integer;

function Path2Segment(TrainNumber: integer; L: extended): integer;
var LCalc, HCalc, iCalc: integer;
begin
  //PathLength и PathLength2 - это единый массив, поэтому если TrainNumber=1 добавляем NodeCount к SFrom, STo
  LCalc := NodeCount * TrainNumber;
  HCalc := (NodeCount - 1) + NodeCount * TrainNumber;

  // ищем, в каком сегменте половинным делением
  if PathLength[HCalc] <= L then
    LCalc := HCalc;
  while LCalc < HCalc - 1 do begin
    iCalc := (LCalc + HCalc) shr 1;
    if PathLength[iCalc] <= L then
      LCalc := iCalc
    else
      HCalc := iCalc;
  end;
  Result := LCalc;

//    Result := Result - NodeCount * TrainNumber;
end; // Path2Segment

function Segment2Path(TrainNumber: integer; Segment: extended): extended;
var iSegment: integer;
    SegmentPart: extended;
begin
  iSegment := Trunc(Segment);
  if iSegment < 0 then
    iSegment := 0
  else if iSegment > NodeCount - 1 then
    iSegment := NodeCount - 1;
  SegmentPart := Segment - iSegment;

  if (iSegment <= (TrainNumber + 1) * NodeCount - 1) or (SegmentPart <= 0) then
    Result := PathLength[iSegment + TrainNumber * NodeCount] + SegmentPart * (PathLength[iSegment + 1 + TrainNumber * NodeCount] - PathLength[iSegment + TrainNumber * NodeCount])
  else
    Result := PathLength[iSegment + TrainNumber * NodeCount] + SegmentPart * (PathLength[iSegment + TrainNumber * NodeCount] - PathLength[iSegment - 1 + TrainNumber * NodeCount]);
end; // Segment2Path

procedure InitTrain();
var HeadWheelShift, VagonLength, VagonWheelBase: extended;
begin
  HeadWheelShift := 14.8;
  VagonLength := 561.9;
  VagonWheelBase := 386.2;
  WheelBase := 80;

  // координаты тележек
  tel2[0] := 0;
  tel1[0] := VagonWheelBase + HeadWheelShift;

  tel2[1] := -VagonLength;
  tel1[1] := tel2[1] + VagonWheelBase;

  tel2[2] := -VagonLength * 2;
  tel1[2] := tel2[2] + VagonWheelBase;

  tel2[3] := -VagonLength * 3 + HeadWheelShift;
  tel1[3] := tel2[3] + VagonWheelBase - HeadWheelShift;

  VagonName[0] := 'Head';
  VagonName[1] := 'Motor';
  VagonName[2] := 'RMotor';
  VagonName[3] := 'RHead';
end; // InitTrain

function GetPeriod(Hour: integer): integer;
var P: integer;
begin
  // период между поездами по часам в сутках
  if      Hour < 2 then  P := 20
  else if Hour < 5 then  P := 10000
  else if Hour < 7 then  P := 10
  else if Hour < 10 then P := 2
  else if Hour < 17 then P := 4
  else if Hour < 20 then P := 2
  else if Hour < 21 then P := 4
  else if Hour < 22 then P := 6
  else                   P := 10;

  Result := P * 60; // переводим минуты в секунды
end; // GetPeriod

function CalcDoor(dt: extended): extended;
begin
  // рассчитываем положение дверей 0 - закрыто, 1 - открыто
  if (dt > 0.5) and (dt <= 1.5) then
    Result := (dt - 0.5) ^ 2
  else if (dt > 1.5) and (dt <= StopTime - 2) then
    Result := 1
  else if (dt > StopTime - 2) and (dt <= StopTime - 1) then
    Result := 1 - (dt - (StopTime - 2)) ^ 2
  else if (dt > StopTime - 0.9) and (dt <= StopTime - 0.7) then
    Result := (0.01 - (dt - (StopTime - 0.8)) ^ 2) * 4
  else
    Result := 0;
end; // CalcDoor

function CalcTrain(dt: extended; typ: integer): extended;
// typ: 0 - стоит на платформе, 1 - обычный, 2 - обратный, т.е. тупик, 3 - проходной
var L: extended;
begin
  // рассчитываем торможение, стоянку и разгон. Стоянка - с 0-й до 6-й сек.
  if typ = 0 then
    L := 0
  else if (typ = 1) or (typ = 2) then begin
    if dt < -3 then
      L := - dt ^ 2 - 2 * dt - 5
    else if dt < -2 then
      L := 4 * dt + 4
    else if dt < 0 then
      L := - dt ^ 2
    else if dt < StopTime then
      L := 0               // стоянка
    else
      L := (dt - StopTime) ^ 1.5; // разгон
    if (typ = 2) and (L < 0) then
      L := -L;
  end else if typ = 3 then
    L := 4 * dt + 4;
  Result := L;
end; // CalcTrain

procedure GetInitPositions;
var i: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    tDeparture[i] := Round(t - Period * Random(1));
    tArrive[i] := tDeparture[i] - StopTime - 3;
  end;
end; // GetInitPositions

procedure GetPositionAbovePeriod;
var i: integer;
begin
  for i := 0 to TrainCount - 1 do
    if t > tArrive[i] + StopTime / 2 + Period / 2 then
      tArrive[i] := Round(tArrive[i] + Period + (Random(1) * 2 - 1) * Period * 0.25)
    else if t < tArrive[i] - Period then
      tArrive[i] := tArrive[i] - 86400;
end; // GetPositionAbovePeriod

procedure InitPath();
var i, j: integer;
begin
  NodeCount := 35;
  zs := 1091;
  xs[0] := 110; ys[0] := -10490;
  xs[34] := 2524; ys[34] := -4757;
  xs[33] := (xs[0] + xs[34]) / 2;
  ys[33] := (ys[0] + ys[34]) / 2;
  for i := 1 to 32 do begin
    xs[i] := xs[0] + (xs[33] - xs[0]) * i / 33;
    ys[i] := ys[0] + (ys[33] - ys[0]) * i / 33;
  end;
  Stops[0] := 33.38;
  LeftDoor[0] := False;
  Types[0] := 2;

  xs2[0] := -22; ys2[0] := -10453;
  xs2[34] := 2212; ys2[34] := -4647;
  xs2[33] := (xs2[0] + xs2[34]) / 2;
  ys2[33] := (ys2[0] + ys2[34]) / 2;
  for i := 1 to 32 do begin
    xs2[i] := xs2[0] + (xs2[33] - xs2[0]) * i / 33;
    ys2[i] := ys2[0] + (ys2[33] - ys2[0]) * i / 33;
  end;
  Stops[1] := Stops[0];
  LeftDoor[1] := True;
  Types[1] := 2;

  xs3[0] := -22; ys3[0] := -10453;
  xs3[1] := 225; ys3[1] := -9811;
  xs3[2] := 254; ys3[2] := -9739;
  xs3[3] := 268; ys3[3] := -9700; //!!
  xs3[4] := 282; ys3[4] := -9662;
  xs3[5] := 305; ys3[5] := -9585;
  xs3[6] := 325; ys3[6] := -9508;
  xs3[7] := 346; ys3[7] := -9432;
  xs3[8] := 366; ys3[8] := -9355;
  xs3[9] := 387; ys3[9] := -9280;
  xs3[10] := 408; ys3[10] := -9204;
  xs3[11] := 430; ys3[11] := -9129;
  xs3[12] := 452; ys3[12] := -9053;
  xs3[13] := 474; ys3[13] := -8978;
  xs3[14] := 497; ys3[14] := -8900;
  xs3[15] := 520; ys3[15] := -8825;
  xs3[16] := 543; ys3[16] := -8750;
  xs3[17] := 566; ys3[17] := -8676;
  xs3[18] := 590; ys3[18] := -8600;
  xs3[19] := 614; ys3[19] := -8525;
  xs3[20] := 638; ys3[20] := -8450;
  xs3[21] := 663; ys3[21] := -8375;
  xs3[22] := 687; ys3[22] := -8302;
  xs3[23] := 713; ys3[23] := -8226;
  xs3[24] := 739; ys3[24] := -8150;
  xs3[25] := 764; ys3[25] := -8078;
  xs3[26] := 790; ys3[26] := -8003;
  xs3[27] := 816; ys3[27] := -7930;
  xs3[28] := 843; ys3[28] := -7856;
  xs3[29] := 870; ys3[29] := -7781;
  xs3[30] := 897; ys3[30] := -7708;
  xs3[31] := 925; ys3[31] := -7634;
  xs3[32] := 953; ys3[32] := -7560;
  xs3[33] := 975; ys3[33] := -7502;
  xs3[34] := 2090;ys3[34] := -4600;
  Stops[2] := Stops[1];
  LeftDoor[2] := False;
  Types[2] := 2;

  xs4[0] := -252; ys4[0] :=-10334;
  xs4[34] := 1767; ys4[34] := -4450;
  xs4[33] := (xs4[0] + xs4[34]) / 2;
  ys4[33] := (ys4[0] + ys4[34]) / 2;
  for i := 1 to 32 do begin
    xs4[i] := xs4[0] + (xs4[33] - xs4[0]) * i / 33;
    ys4[i] := ys4[0] + (ys4[33] - ys4[0]) * i / 33;
  end;
  Stops[3] := Stops[2];
  LeftDoor[3] := True;
  Types[3] := 2;

  xs5[0] := -252;ys5[0] := -10334;
  xs5[1] := -71; ys5[1] := -9807;
  xs5[2] := -43; ys5[2] := -9726;
  xs5[3] := -19; ys5[3] := -9644;
  xs5[4] := 0;   ys5[4] := -9561;
  xs5[5] := 16;  ys5[5] := -9477;
  xs5[6] := 28;  ys5[6] := -9398;
  xs5[7] := 40;  ys5[7] := -9319;
  xs5[8] := 53;  ys5[8] := -9243;
  xs5[9] := 66;  ys5[9] := -9165;
  xs5[10] := 80;  ys5[10] := -9087;
  xs5[11] := 95;  ys5[11] := -9009;
  xs5[12] := 109; ys5[12] := -8933;
  xs5[13] := 124; ys5[13] := -8855;
  xs5[14] := 140; ys5[14] := -8778;
  xs5[15] := 156; ys5[15] := -8701;
  xs5[16] := 173; ys5[16] := -8624;
  xs5[17] := 190; ys5[17] := -8548;
  xs5[18] := 208; ys5[18] := -8471;
  xs5[19] := 226; ys5[19] := -8395;
  xs5[20] := 246; ys5[20] := -8315;
  xs5[21] := 265; ys5[21] := -8240;
  xs5[22] := 285; ys5[22] := -8164;
  xs5[23] := 305; ys5[23] := -8089;
  xs5[24] := 326; ys5[24] := -8013;
  xs5[25] := 347; ys5[25] := -7937;
  xs5[26] := 369; ys5[26] := -7861;
  xs5[27] := 391; ys5[27] := -7786;
  xs5[28] := 414; ys5[28] := -7711;
  xs5[29] := 438; ys5[29] := -7635;
  xs5[30] := 462; ys5[30] := -7559;
  xs5[31] := 486; ys5[31] := -7485;
  xs5[32] := 511; ys5[32] := -7410;
  xs5[33] := 536; ys5[33] := -7336;
  xs5[34] := 1544;ys5[34] := -4393;
  Stops[4] := Stops[3];
  LeftDoor[4] := True;
  Types[4] := 2;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do
    Stops[i] := Segment2Path(i, Stops[i]);
end; // InitPath

procedure Init();
begin
  TrainCount := 5; // количество часов и поездов
  VagonCount := 4;
  StopTime := 60;  // остановка - 60 секунд

  InitPath;
//  InitClock;
  InitTrain;

  // удаляем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');

  // пантограф
  ad0 := 37.7 / 57.3; // начальный угол нижней рамы
  au0 := 30.4 / 57.3; // начальный угол верхней рамы
  ld := 30.9; // длина нижней рамы
  lu := 49.1; // длина верхней рамы
  base := 35.6; // длина базы
end; // Init

procedure DrawPantograf(H, AngleD, AngleU: extended);
var x, z: extended;
begin
//h := 0;
  // верхний полоз
  glPushMatrix;
  glTranslatef(0, 0, H);
  Draw3dObject('Train.MotorVagon.Poloz');
  glPopMatrix;

  // нижний правый
  x := -203.35;
  z := 144;
  glPushMatrix;
  glTranslatef(x, 0, z);
  glRotatef(AngleD * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanLD');
  glPopMatrix;

  // нижний левый
  x := -167.7;
  z := 144;
  glPushMatrix;
  glTranslatef(x, 0, z);
  glRotatef(-AngleD * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanRD');
  glPopMatrix;

  // верхний левый
  x := -185;
  z := 188;
  glPushMatrix;
  glTranslatef(x, 0, z + H);
  glRotatef(-AngleU * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanRU');
  glPopMatrix;

  // верхний правый
  x := -185;
  z := 188;
  glPushMatrix;
  glTranslatef(x, 0, z + H);
  glRotatef(AngleU * 57.3, 0, 1, 0);
  glTranslatef(-x, 0, -z);
  Draw3dObject('Train.MotorVagon.PanLU');
  glPopMatrix;
end; // DrawPantograf

procedure DrawPantografs(part: extended);
var AngleD, AngleU, x1, y1, H: extended;
begin
  AngleD := part * 0.6;

  y1 := ld * sin(ad0 - AngleD);
  x1 := base / 2 + ld * cos(ad0 - AngleD);
  AngleU := ArcCos(x1 / lu);
  H := y1 + lu * sin(AngleU) - ld * sin(ad0) - lu * sin(au0);

  DrawPantograf(H, -AngleD, -AngleU + au0);
  glRotatef(180, 0, 0, 1);
  glTranslatef(1299.6, 0, 0);
  DrawPantograf(H, -AngleD, -AngleU + au0);
end; // DrawPantografs

procedure CalcWheel1(TrainNumber: integer; 
                     L: extended;
                     var WheelX: extended;
                     var WheelY: extended;
                     var WheelZ: extended;
                     var AngleXY: extended);
var Segment: integer;
    SegmentPart: extended;
begin
  // ищем, в каком сегменте
  Segment := Path2Segment(TrainNumber, L);
  // рассчитываем долю сегмента
  if (Segment + 1) mod NodeCount = 0 then begin
    SegmentPart := (L - PathLength[Segment]) / (PathLength[Segment] - PathLength[Segment - 1]);
    WheelX := Xs[Segment] + SegmentPart * (Xs[Segment] - Xs[Segment - 1]);
    WheelY := Ys[Segment] + SegmentPart * (Ys[Segment] - Ys[Segment - 1]);
    WheelZ := Zs;
    AngleXY := Arctan2(Ys[Segment - 1] - Ys[Segment], Xs[Segment - 1] - Xs[Segment]) * 57.3;
  end else begin
    SegmentPart := (L - PathLength[Segment]) / (PathLength[Segment + 1] - PathLength[Segment]);
    WheelX := Xs[Segment] + SegmentPart * (Xs[Segment + 1] - Xs[Segment]);
    WheelY := Ys[Segment] + SegmentPart * (Ys[Segment + 1] - Ys[Segment]);
    WheelZ := Zs;
    AngleXY := Arctan2(Ys[Segment] - Ys[Segment + 1], Xs[Segment] - Xs[Segment + 1]) * 57.3;
  end;
end; // CalcWheel1

procedure DrawTrain1(TrainNumber: integer; LeftOpened: Boolean; typ: integer);
var dt, LHead, dDoor, dPan: extended;
    i, SegmentHead, SegmentTail: integer;
    Wheel1X, Wheel1Y, Wheel1Z, AngleXY1: extended;
    Wheel2X, Wheel2Y, Wheel2Z, AngleXY2: extended;
    Wheel3X, Wheel3Y, Wheel3Z, AngleXY3: extended;
    StraightTrain: Boolean;
begin
  dt := t - tArrive[0];
//  dt := 3; // раскомментируй эту строку, чтобы зафиксировать поезда на платформе
  if (dt > StopTime + 30) or (dt < -33) then
    exit;

  // рассчитываем торможение, стоянку и разгон. Стоянка - с 0-й до 6-й сек.
  // 0 - поезд стоит на платформе
  if typ = 0 then
    LHead := 0
  else if (typ = 1) or (typ = 2) then begin
    if dt < -4 then
      LHead := 4 * dt + 8
    else if dt < 0 then
      LHead := - dt ^ 2 / 2
    else if dt < StopTime then
      LHead := 0               // стоянка
    else if dt < StopTime + 9 then
      LHead := (dt - StopTime) ^ 1.5 // разгон
    else
      LHead :=  4.5 * (dt - StopTime - 9) + 9 ^ 1.5;
    if (typ = 2) and (LHead < 0) then
      LHead := -LHead;
  end;

  // рассчитываем положение дверей 0 - закрыто, 1 - открыто
  if dt < 0.5 then
    dDoor := 0
  else if dt <= 1.5 then
    dDoor := (dt - 0.5) ^ 2
  else if dt <= 18 then
    dDoor := 1
  else if dt <= 19 then
    dDoor := 1 - (dt - 18) ^ 2
  else if dt < 41 then
    dDoor := 0
  else if dt <= 42 then
    dDoor := (dt - 41) ^ 2
  else if dt <= 58 then
    dDoor := 1
  else if dt <= 59 then
    dDoor := 1 - (dt - 58) ^ 2
  else
    dDoor := 0;

  // рассчитываем положение пантографа 0 - поднят, 1 - опущен
  if dt < 20 then
    dPan := 0
  else if dt <= 21 then
    dPan := (dt - 20) ^ 2
  else if dt <= 38 then
    dPan := 1
  else if dt <= 39 then
    dPan := 1 - (dt - 38) ^ 2
  else
    dPan := 0;

  // при помощи коэффициентов приводим к масштабу
  LHead := - LHead * 50 + Stops[TrainNumber];
  dDoor := dDoor * 14;

  // определяем, рисовать ли поезд повагонно, или целиком.
  StraightTrain := NodeCount = 2;
  if not StraightTrain then begin
    SegmentHead := Path2Segment(TrainNumber, LHead - tel1[0] - WheelBase / 2);
    SegmentTail := Path2Segment(TrainNumber, LHead - tel2[VagonCount - 1] + WheelBase / 2);
    if SegmentTail = NodeCount * (TrainNumber + 1) - 1 then
      SegmentTail := NodeCount * (TrainNumber + 1) - 2;
    StraightTrain := SegmentHead = SegmentTail;
  end;

  if not StraightTrain then
    for i := 0 to VagonCount - 1 do begin
      // 1-я тележка
      CalcWheel1(TrainNumber, LHead - tel1[i] + WheelBase / 2, Wheel1X, Wheel1Y, Wheel1Z, AngleXY1);
      CalcWheel1(TrainNumber, LHead - tel1[i] - WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2);
      AngleXY1 := Arctan2(Wheel2Y - Wheel1Y, Wheel2X - Wheel1X) * 57.3;
      Wheel1X := (Wheel1X + Wheel2X) / 2;
      Wheel1Y := (Wheel1Y + Wheel2Y) / 2;

      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      Draw3dObject('Train.HeadVagon.Tel2');
      glPopMatrix;

      // 2-я тележка
      CalcWheel1(TrainNumber, LHead - tel2[i] + WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2);
      CalcWheel1(TrainNumber, LHead - tel2[i] - WheelBase / 2, Wheel3X, Wheel3Y, Wheel3Z, AngleXY3);
      AngleXY2 := Arctan2(Wheel3Y - Wheel2Y, Wheel3X - Wheel2X) * 57.3;
      Wheel2X := (Wheel2X + Wheel3X) / 2;
      Wheel2Y := (Wheel2Y + Wheel3Y) / 2;
      glPushMatrix;
      glTranslatef(Wheel2X, Wheel2Y, Wheel2Z);
      glRotatef(AngleXY2, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      Draw3dObject('Train.HeadVagon.Tel2');
      glPopMatrix;

      // вагон
      glPushMatrix;
      glTranslatef(Wheel2X, Wheel2Y, Wheel2Z);
      glRotatef(Arctan2(Wheel1Y - Wheel2Y, Wheel1X - Wheel2X) * 57.3, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      glRotatef(-Arctan2(Wheel1Z - Wheel2Z, sqrt(sqr(Wheel1X - Wheel2X) + sqr(Wheel1Y - Wheel2Y))) * 57.3, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y

      if dDoor = 0 then
        Draw3dObject('Train.' + VagonName[i] + 'Vagon.Closed')
      else begin
        if LeftOpened then begin
          // поезд
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.LeftOpened');

          // рисуем двери
          glTranslatef(dDoor, 0, 0); // Левая дверь
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.dverLL');
          glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.dverLR');
        end else begin
          // поезд
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.RightOpened');

          // рисуем двери
          glTranslatef(dDoor, 0, 0); // Левая дверь
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.dverRR');
          glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
          Draw3dObject('Train.' + VagonName[i] + 'Vagon.dverRL');
        end;
      end;
      glPopMatrix;
    end
  else begin
//    glPushMatrix;
      // поезд
    CalcWheel1(TrainNumber, LHead - Tel2[0], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
//showmessage(inttostr(dpan*10));
    if dPan <> 0 then begin
      Draw3dObject('Train.Train.ClosedWOPantograf');
      DrawPantografs(dPan);
    end else if dDoor = 0 then
      Draw3dObject('Train.Train.Closed')
    else begin
      if LeftOpened then begin
        // поезд
        Draw3dObject('Train.Train.LeftOpened');
        // двери
        glTranslatef(dDoor, 0, 0); // Левая дверь
        Draw3dObject('Train.dverLL');
        glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
        Draw3dObject('Train.dverLR');
      end else begin
        // поезд
        Draw3dObject('Train.Train.RightOpened');
        // двери
        glTranslatef(dDoor, 0, 0); // Левая дверь
        Draw3dObject('Train.dverRR');
        glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
        Draw3dObject('Train.dverRL');
      end;
    end;

    glPopMatrix;
  end;
end; // DrawTrain1

// процедура рисует путь шариками, в тестовых целях
procedure DrawPath1(r: integer);
var i, j: integer;
    X, Y, Z, AXY, AZ: extended;
begin
  for j := 0 to TrainCount - 1 do
    for i := 0 to NodeCount - 1 do
      DrawSphere(xs[i + j * NodeCount], ys[i + j * NodeCount], zs, r);
end; // DrawPath1

var StartStatus: integer;
    i, CurrentPath: integer;
    Hour: word;
    CurrentSet: Boolean;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

//  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then begin
    GetInitPositions;

    CurrentPath := Random(TrainCount);
    tArrive[CurrentPath] := tArrive[0];
    CurrentSet := True;
  end else begin
    GetPositionAbovePeriod;

    if t > tArrive[0] then
      CurrentSet := False
    else if not CurrentSet then begin
      CurrentPath := Random(TrainCount);
      tArrive[CurrentPath] := tArrive[0];
      CurrentSet := True;
    end;
  end;

  // рисуем поезд
  DrawTrain1(CurrentPath, LeftDoor[CurrentPath], Types[CurrentPath]);

//  for i := 0 to TrainCount - 1 do
//    DrawTrain1(i, LeftDoor[i], Types[i]);

//  DrawPath1(20);
  StartStatus := 1;
end.