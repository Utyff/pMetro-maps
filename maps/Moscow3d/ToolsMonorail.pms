var
  // часы
  Digit, ySlide: array[0..8] of integer; 

  // вагоны
  VagonCount: integer;
  tel: array[0..6] of integer;
  VagonName: array[0..5] of string;

  t: single;
  StopTime: integer;
  Period: integer;
  WheelBase: extended; // расстояние между крайними колёсами в тележке


function Path2Segment(TrainNumber: integer; L: extended): integer;
var LCalc, HCalc, iCalc: integer;
begin
  //PathLength и PathLength2 - это единый массив, поэтому если TrainNumber=1 добавляем NodeCount к SFrom, STo
  LCalc := NodeCount * TrainNumber;
  HCalc := (NodeCount - 1) + NodeCount * TrainNumber;

  // ищем, в каком сегменте половинным делением
  if PathLength[HCalc] <= L then
    LCalc := HCalc;
  while LCalc < HCalc - 1 do begin
    iCalc := (LCalc + HCalc) shr 1;
    if PathLength[iCalc] <= L then
      LCalc := iCalc
    else
      HCalc := iCalc;
  end;
  Result := LCalc;

//    Result := Result - NodeCount * TrainNumber;
end; // Path2Segment

function Segment2Path(TrainNumber: integer; Segment: extended): extended;
var iSegment: integer;
    SegmentPart: extended;
begin
  iSegment := Trunc(Segment);
  if iSegment < 0 then
    iSegment := 0
  else if iSegment > NodeCount - 1 then
    iSegment := NodeCount - 1;
  SegmentPart := Segment - iSegment;

  if (iSegment <= (TrainNumber + 1) * NodeCount - 1) or (SegmentPart <= 0) then
    Result := PathLength[iSegment + TrainNumber * NodeCount] + SegmentPart * (PathLength[iSegment + 1 + TrainNumber * NodeCount] - PathLength[iSegment + TrainNumber * NodeCount])
  else
    Result := PathLength[iSegment + TrainNumber * NodeCount] + SegmentPart * (PathLength[iSegment + TrainNumber * NodeCount] - PathLength[iSegment - 1 + TrainNumber * NodeCount]);
end; // Segment2Path

procedure InitClock();
begin
  // смещение каждого разряда часов относительно предыдущего
  ySlide[0] := 0; 
  ySlide[1] := 5;
  ySlide[2] := 6;
  ySlide[3] := 5;
  ySlide[4] := 6;
  ySlide[5] := 5;
  ySlide[6] := 10;
  ySlide[7] := 6;
  ySlide[8] := 5;
end;

procedure InitTrain();
var VagonLength: extended;
    i: integer;
begin
  VagonLength := 128.4;
  WheelBase := 46; // расстояние между крайними колёсами в тележке

  // координаты тележек
  for i := 0 to VagonCount do
    Tel[i] := -i * VagonLength;

  VagonName[0] := '1';
  VagonName[1] := '2';
  VagonName[2] := '2';
  VagonName[3] := '2';
  VagonName[4] := '2';
  VagonName[5] := '3';
end; // InitTrain

function GetPeriod(Hour: integer): integer;
var P: integer;
begin
  // период между поездами по часам в сутках
  if      Hour < 7 then  P := 10000
  else if Hour < 9 then  P := 15
  else if Hour < 11 then P := 11
  else if Hour < 13 then P := 9
  else if Hour < 15 then P := 11
  else if Hour < 20 then P := 9
  else if Hour < 21 then P := 11
  else if Hour < 23 then P := 22
  else                   P := 10000;

  Result := P * 60 / 3; // переводим минуты в секунды. Уменьшаем втрое, чтобы не нервировать пользователей
end; // GetPeriod

procedure CalcWheel(TrainNumber: integer; 
                    L: extended;
                    var WheelX: extended;
                    var WheelY: extended;
                    var WheelZ: extended;
                    var AngleXY: extended;
                    var AngleZ: extended);
var Segment: integer;
    SegmentPart: extended;
begin
  // ищем, в каком сегменте
  Segment := Path2Segment(TrainNumber, L);
  // рассчитываем долю сегмента
  if (Segment + 1) mod NodeCount = 0 then begin
    SegmentPart := (L - PathLength[Segment]) / (PathLength[Segment] - PathLength[Segment - 1]);
    WheelX := Xs[Segment] + SegmentPart * (Xs[Segment] - Xs[Segment - 1]);
    WheelY := Ys[Segment] + SegmentPart * (Ys[Segment] - Ys[Segment - 1]);
    WheelZ := Zs[Segment] + SegmentPart * (Zs[Segment] - Zs[Segment - 1]);
    AngleXY := Arctan2(Ys[Segment - 1] - Ys[Segment], Xs[Segment - 1] - Xs[Segment]) * 57.3;
    AngleZ := -Arctan2(Zs[Segment] - Zs[Segment - 1], sqrt(sqr(Xs[Segment] - Xs[Segment - 1]) + sqr(Ys[Segment] - Ys[Segment - 1]))) * 57.3;
  end else begin
    SegmentPart := (L - PathLength[Segment]) / (PathLength[Segment + 1] - PathLength[Segment]);
    WheelX := Xs[Segment] + SegmentPart * (Xs[Segment + 1] - Xs[Segment]);
    WheelY := Ys[Segment] + SegmentPart * (Ys[Segment + 1] - Ys[Segment]);
    WheelZ := Zs[Segment] + SegmentPart * (Zs[Segment + 1] - Zs[Segment]);
    AngleXY := Arctan2(Ys[Segment] - Ys[Segment + 1], Xs[Segment] - Xs[Segment + 1]) * 57.3;
    AngleZ := -Arctan2(Zs[Segment + 1] - Zs[Segment], sqrt(sqr(Xs[Segment + 1] - Xs[Segment]) + sqr(Ys[Segment + 1] - Ys[Segment]))) * 57.3;
  end;
end; // CalcWheel

// процедура рисует путь шариками, в тестовых целях
procedure DrawPath(r: integer);
var i, j: integer;
    X, Y, Z, AXY, AZ: extended;
begin
  for j := 0 to TrainCount - 1 do begin
    for i := 0 to NodeCount - 1 do
      DrawSphere(xs[i + j * NodeCount], ys[i + j * NodeCount], zs[i + j * NodeCount], r);
    if DoClipHead[j] then begin
      CalcWheel(j, ClipHead[j], X, Y, Z, AXY, AZ);
      glPushMatrix;
      glTranslatef(X, Y, Z);
      glRotatef(AXY, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      EnableClipPlane(-1, 0, 0, 0);
      glPopMatrix;
      DrawSphere(X, Y, Z, r * 2);
    end;
    DisableClipPlane;
    if DoClipTail[j] then begin
      CalcWheel(j, ClipTail[j], X, Y, Z, AXY, AZ);
      glPushMatrix;
      glTranslatef(X, Y, Z);
      glRotatef(AXY, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
      EnableClipPlane(1, 0, 0, 0);
      glPopMatrix;
      DrawSphere(X, Y, Z, r * 2);
    end;
    DisableClipPlane;
  end;
end; // DrawPath

function CalcDoor(dt: extended; typ: integer): extended;
begin
  // рассчитываем положение дверей 0 - закрыто, 1 - открыто
  Result := 0;
  if typ = 3 then
    exit;
  if dt < 0.5 then
    exit;
  if dt <= 1.5 then
    Result := (dt - 0.5) ^ 2
  else if dt <= StopTime - 2 then
    Result := 1
  else if dt <= StopTime - 1 then
    Result := 1 - (dt - (StopTime - 2)) ^ 2
  else if (dt > StopTime - 0.9) and (dt <= StopTime - 0.7) then
    Result := (0.01 - (dt - (StopTime - 0.8)) ^ 2) * 4;
end; // CalcDoor

function CalcTrain(dt: extended; typ: integer): extended;
// typ: 0 - стоит на платформе, 1 - обычный, 2 - обратный, т.е. тупик, 3 - проходной
var L: extended;
begin
  // рассчитываем торможение, стоянку и разгон. Стоянка - с 0-й до 6-й сек.
  if typ = 0 then
    L := 0
  else if (typ = 1) or (typ = 2) then begin
    if dt < -3 then
      L := - dt ^ 2 - 2 * dt - 5
    else if dt < -2 then
      L := 4 * dt + 4
    else if dt < 0 then
      L := - dt ^ 2
    else if dt < StopTime then
      L := 0               // стоянка
    else
      L := (dt - StopTime) ^ 1.5; // разгон
    if (typ = 2) and (L < 0) then
      L := -L;
  end else if typ = 3 then
    L := 4 * dt + 4;
  Result := L;
end; // CalcTrain

procedure DrawTrain(TrainNumber: integer; LeftOpened: Boolean; typ: integer);
var dt, dDoor, LHead: extended;
    i, SegmentHead, SegmentTail: integer;
    Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1: extended;
    Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2: extended;
    OldWheelX, OldWheelY: extended;
    StraightTrain: Boolean;
begin
  dt := t - tArrive[TrainNumber];

  if typ = 0 then
    dt := 3;

  if (dt < -10) or (dt > 25) then
    exit;

  // запоминаем, когда поезд отправился, для часов
  if (dt > StopTime + 3) and (tDeparture[TrainNumber] < tArrive[TrainNumber]) then
    tDeparture[TrainNumber] := Round(t) + 0.5;

  LHead := CalcTrain(dt, typ);

  // обрезка
  if (LHead > 0) and DoClipHead[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipHead[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(-1, 0, 0, 0);
    glPopMatrix;
  end else if (LHead < 0) and DoClipTail[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipTail[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(1, 0, 0, 0);
    glPopMatrix;
  end;

  // при помощи коэффициентов приводим к масштабу
  LHead := -25 * LHead + Stops[TrainNumber];
  dDoor := CalcDoor(dt, typ) * 21;

  // определяем, рисовать ли поезд повагонно, или целиком.
  StraightTrain := NodeCount = 2;
  if not StraightTrain then begin
    SegmentHead := Path2Segment(TrainNumber, LHead - tel[0] - WheelBase / 2);
    SegmentTail := Path2Segment(TrainNumber, LHead - tel[VagonCount] + WheelBase / 2);
    if SegmentTail = NodeCount * (TrainNumber + 1) - 1 then
      SegmentTail := NodeCount * (TrainNumber + 1) - 2;
    StraightTrain := SegmentHead = SegmentTail;
  end;

  if not StraightTrain then begin
    for i := 0 to VagonCount do begin
      // тележка
      CalcWheel(TrainNumber, LHead - tel[i] + WheelBase / 2, Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
      CalcWheel(TrainNumber, LHead - tel[i] - WheelBase / 2, Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2);
      Wheel1X := (Wheel1X + Wheel2X) / 2;
      Wheel1Y := (Wheel1Y + Wheel2Y) / 2;
      AngleXY1 := Arctan2(Wheel2Y - Wheel1Y, Wheel2X - Wheel1X) * 57.3;
      glPushMatrix;
      glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
      glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
//      glRotatef(AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
      Draw3dObject('Mono.Wheel');
      glPopMatrix;

      if i > 0 then begin
        glPushMatrix;
        glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
        glRotatef(Arctan2(OldWheelY - Wheel1Y, OldWheelX - Wheel1X) * 57.3, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
//        glRotatef(Arctan2(OldWheelZ - Wheel1Z, sqrt(sqr(OldWheelY - Wheel1Y) + sqr(OldWheelX - Wheel1X))) * 57.3, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
        Draw3dObject('Mono.Vagon' + VagonName[i - 1]);
        glPopMatrix;
      end;

      OldWheelX := Wheel1X;
      OldWheelY := Wheel1Y;
    end;
  end else begin
    glPushMatrix;
      // поезд
    CalcWheel(TrainNumber, LHead - Tel[0], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    glRotatef(-AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y
    if dDoor = 0 then
      Draw3dObject('Mono.Train.Closed')
    else begin
      if LeftOpened then begin
        // поезд
        Draw3dObject('Mono.Train.LeftOpened');
        // двери
        glTranslatef(dDoor, 0, 0); // Левая дверь
        Draw3dObject('Mono.dverLL');
        glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
        Draw3dObject('Mono.dverLR');
      end else begin
        // поезд
        Draw3dObject('Mono.Train.RightOpened');
        // двери
        glTranslatef(dDoor, 0, 0); // Левая дверь
        Draw3dObject('Mono.dverRR');
        glTranslatef(-2 * dDoor, 0, 0); // Правая дверь
        Draw3dObject('Mono.dverRL');
      end;
    end;

    glPopMatrix;
  end;

  // отключаем обрезку
//  if DoClip[TrainNumber] then
//  DisableClipPlane;
end; // DrawTrain

procedure GetInitPositions;
var i: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    tDeparture[i] := Round(t - Period * Random(1));
    tArrive[i] := tDeparture[i] - StopTime - 3;
  end;
end; // GetInitPositions

procedure GetPositionAbovePeriod;
var i: integer;
begin
  for i := 0 to TrainCount - 1 do
    if t > tArrive[i] + StopTime / 2 + Period / 2 then
      tArrive[i] := Round(tArrive[i] + Period + (Random(1) * 2 - 1) * Period * 0.25)
    else if t < tArrive[i] - Period then
      tArrive[i] := tArrive[i] - 86400;
end; // GetPositionAbovePeriod

procedure DrawTrains(LeftOpened: Boolean; typ: integer);
var i: integer;
begin
  for i := 0 to TrainCount - 1 do
    DrawTrain(i, LeftOpened, typ);
end; // DrawTrains

procedure DrawEscalatorStairs(Hour: integer; t: extended);
begin
  if (Hour >= 7) and (Hour < 23) then begin
    // ступени эскалатора, скорость - 1 ступень в секунду. Frac(t * v)
    DrawStairs('SUp', 1 - Frac(t));
    DrawStairs('SDown', Frac(t));
  end else begin
    DrawStairs('SUp', 0);
    DrawStairs('SDown', 0);
  end;
end;
