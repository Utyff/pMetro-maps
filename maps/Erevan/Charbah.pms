var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..0] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..0] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, ys, zs: array[0..1] of extended; 
  PathLength: array[0..1] of extended;

{$I ToolsNomernoy2.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := True;
    DoClipHead[i] := True;
    DoClipTail[i] := True;
  end;

  NodeCount := 2;
  xs[0]  := 2316; ys[0]  := -251.2;  zs[0] := 6;
  xs[1]  := -741;  ys[1]  := ys[0];  zs[1] := zs[0];
  Stops[0] := 0.575;
  Clocks[0] := 0.5125;
  DoClipHead[0] := False;
  DoClipTail[0] := False;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 1; // количество часов и поездов
  VagonCount := 3;
  StopTime := 8;        // остановка - 8 секунд

  InitPath;
  InitClock;
  InitTrain;

  // удаляем статичные ступеньки  
//  HideObject('SUp');
//  HideObject('SDown');
end; // Init

var StartStatus: integer;
    i: integer;
    Hour: word;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

//  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then
    GetInitPositions
  else
    GetPositionAbovePeriod;


  // рисуем поезда
//  DrawTrains(True, 2);
  DrawSingleTrain(0, True, 2);

  // часы
  glPushMatrix;
  glTranslatef(0, 115, 48);
  DrawTrainClock(0);
  glPopMatrix;

//  DrawPath(24);

  StartStatus := 1;
end.
