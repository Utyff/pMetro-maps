var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..3] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..3] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, xs2, xs3, xs4, ys, ys2, ys3, ys4, zs, zs2, zs3, zs4: array[0..1] of extended; 
  PathLength, PathLength2, PathLength3, PathLength4: array[0..1] of extended;

{$I ToolsNomernoyP.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := True;
    DoClipHead[i] := True;
    DoClipTail[i] := True;
  end;

  NodeCount := 2;

  xs[0] := 2149; ys[0] := -1215.4;  zs[0] := 430.4;
  xs[1] := -764; ys[1] := ys[0]; zs[1] := zs[0];
  Stops[0] := 0.2403;
  Clocks[0] := 0.2019;
  ClipHead[0] := 0.1;
  ClipTail[0] := 0.9;

  xs2[0] := xs[1]; ys2[0] := -797.8;  zs2[0] := zs[0];
  xs2[1] := xs[0]; ys2[1] := ys2[0]; zs2[1] := zs[0];
  Stops[1] := 0.2362;
  Clocks[1] := Clocks[0];
  ClipHead[1] := 0.1;
  ClipTail[1] := 0.9;

  xs3[0] := -564.2; ys3[0] := -789; zs3[0] := 114.7;
  xs3[1] := xs3[0];  ys3[1] := -3710;  zs3[1] := zs3[0];
  Stops[2] := 0.24;
  Clocks[2] := 0.201;
  ClipHead[2] := 0.12;
  ClipTail[2] := 0.88;

  xs4[0] := -1054.4;  ys4[0] := ys3[1]; zs4[0] := zs3[0];
  xs4[1] := xs4[0]; ys4[1] := ys3[0]; zs4[1] := zs3[0];
  Stops[3] := Stops[2];
  Clocks[3] := Clocks[2];
  ClipHead[3] := 0.12;
  ClipTail[3] := 0.88;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 4; // количество часов и поездов
  VagonCount := 3;
  StopTime := 8;        // остановка - 8 секунд

  InitPath;
  InitClock;
  InitTrain;

  // удал€ем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');
  HideObject('1Left');
  HideObject('1Right');
  HideObject('2Left');
  HideObject('2Right');
end; // Init

procedure DrawTrain1(TrainNumber: integer; LeftOpened: Boolean; typ: integer);
var dt, dDoor: extended;
begin
  // часы
  glPushMatrix;
  if TrainNumber = 0 then begin
    glTranslatef(0, 110, 0); // Ћева€ дверь
    DrawTrainClock(TrainNumber);
  end else if TrainNumber = 1 then begin
    glTranslatef(0, -110, 0); // Ћева€ дверь
    DrawTrainClock(TrainNumber);
  end else
    DrawTrainClock(TrainNumber);
  glPopMatrix;

  dt := t - tArrive[TrainNumber];

  if typ = 0 then
    dt := 3;

  // рисуем станционные двери
  dDoor := CalcDoor(dt, typ) * 18;
  if TrainNumber = 1 then begin
    glPushMatrix;
    glTranslatef(-dDoor, 0, 0); // Ћева€ дверь
    Draw3dObject('1Left');
    glTranslatef(2 * dDoor, 0, 0); // ѕрава€ дверь
    Draw3dObject('1Right');
    glPopMatrix;
  end else if TrainNumber = 0 then begin
    glPushMatrix;
    glTranslatef(dDoor, 0, 0); // Ћева€ дверь
    Draw3dObject('2Right');
    glTranslatef(-2 * dDoor, 0, 0); // ѕрава€ дверь
    Draw3dObject('2Left');
    glPopMatrix;
  end;

  if (dt < MinTime) or (dt > MaxTime) then
    exit;

  DrawSingleTrain(TrainNumber, LeftOpened, typ);
end; // DrawTrain



var StartStatus: integer;
    i: integer;
    Hour: word;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then
    GetInitPositions
  else
    GetPositionAbovePeriod;


  // рисуем поезда
  DrawTrain1(0, True, 1);
  DrawTrain1(1, True, 1);
  DrawTrain1(2, True, 1);
  DrawTrain1(3, True, 1);
//  DrawPath(24);

  StartStatus := 1;
end.