var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..1] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..1] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, xs2, ys, ys2, zs, zs2: array[0..1] of extended; 
  PathLength, PathLength2: array[0..1] of extended;

{$I ToolsPrishelec.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := True;
    DoClipHead[i] := True;
    DoClipTail[i] := True;
  end;

  NodeCount := 2;

  xs[0] := 2384; ys[0] := -797.7;  zs[0] := 115.3;
  xs[1] := -529; ys[1] := ys[0]; zs[1] := zs[0];
  Stops[0] := 0.238;
  Clocks[0] := 0.2015;
  ClipHead[0] := 0.1;
  ClipTail[0] := 0.9;

  xs2[0] := -903; ys2[0] := -797.7;  zs2[0] := 272.9;
  xs2[1] := 2007; ys2[1] := ys2[0]; zs2[1] := zs2[0];
  Stops[1] := Stops[0];
  Clocks[1] := 0.202;
  ClipHead[1] := 0.1;
  ClipTail[1] := 0.9;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 2; // количество часов и поездов
  VagonCount := 3;
  StopTime := 8;        // остановка - 8 секунд

  InitPath;
  InitClock;
  InitTrain;

  // удаляем статичные ступеньки  
  HideObject('SUp');
  HideObject('SDown');
end; // Init

procedure DrawTrain1(TrainNumber: integer; LeftOpened: Boolean; typ: integer);
var dt: extended;
begin
  glTranslatef(0, 0, -11); // смещаем часы ниже
  DrawTrainClock(TrainNumber);
  glTranslatef(0, 0, 11); // смещаем часы ниже

  dt := t - tArrive[TrainNumber];

  if typ = 0 then
    dt := 3;

  if (dt < MinTime) or (dt > MaxTime) then
    exit;

  DrawSingleTrain(TrainNumber, LeftOpened, typ);
end; // DrawTrain

var StartStatus: integer;
    i: integer;
    Hour: word;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := GetPeriod(Hour);

  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then
    GetInitPositions
  else
    GetPositionAbovePeriod;


  // рисуем поезда
  DrawTrain1(0, False, 1);
  DrawTrain(1, True, 1);
//  DrawPath(24);

  StartStatus := 1;
end.