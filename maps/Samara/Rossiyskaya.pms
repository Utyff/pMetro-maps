var 
  // поезда
  TrainCount: integer;
  tArrive, tDeparture, Stops, Clocks, ClipHead, ClipTail: array[0..1] of extended;
  ShowClock, DoClipHead, DoClipTail: array[0..1] of Boolean;

  // рельсы
  NodeCount: integer;
  xs, xs2, ys, ys2, zs, zs2: array[0..1] of extended; 
  PathLength, PathLength2: array[0..1] of extended;

  t0, t1, t2: extended;

{$I ToolsNomernoy.pms}

procedure InitPath();
var i, j: integer;
begin
  for i := 0 to TrainCount - 1 do begin
    ShowClock[i] := True;
    DoClipHead[i] := True;
    DoClipTail[i] := True;
  end;

  NodeCount := 2;
  xs[0]  := 1738; ys[0]  := -46.9;  zs[0] := 2.3;
  xs[1]  := -1419;  ys[1]  := ys[0];  zs[1] := zs[0];
  Stops[0] := 0.22;
  Clocks[0] := 0.187;
  ClipHead[0] := 0.06;
  ClipTail[0] := 1;

  xs2[0] := xs[0]; ys2[0] := 46.9; zs2[0] := zs[0];
  xs2[1] := xs[1];  ys2[1] := ys2[0]; zs2[1] := zs[0];
  Stops[1] := Stops[0];
  Clocks[1] := Clocks[0];
  ClipHead[1] := 0.06;
  ClipTail[1] := 0.94;

  // рассчитываем длину трассы
  for j := 0 to TrainCount - 1 do begin
    PathLength[0 + j * NodeCount] := 0;
    for i := 1 to NodeCount - 1 do
      PathLength[i + j * NodeCount] := PathLength[i - 1 + j * NodeCount] + sqrt((Xs[i + j * NodeCount] - Xs[i - 1 + j * NodeCount]) ^ 2 + (Ys[i + j * NodeCount] - Ys[i - 1 + j * NodeCount]) ^ 2 + (Zs[i + j * NodeCount] - Zs[i - 1 + j * NodeCount]) ^ 2);
  end;

  // пересчитаем точки остановок, часов и обрезки
  for i := 0 to TrainCount - 1 do begin
    Stops[i] := Segment2Path(i, Stops[i]);
    Clocks[i] := Segment2Path(i, Clocks[i]);
    ClipHead[i] := Segment2Path(i, ClipHead[i]);
    ClipTail[i] := Segment2Path(i, ClipTail[i]);
  end;
end; // InitPath

procedure Init();
begin
  TrainCount := 2; // количество часов и поездов
  VagonCount := 3;
  StopTime := 8;        // остановка - 8 секунд

  InitPath;
  InitClock;
  InitTrain;

  MaxTime := 5 * 60;
end; // Init


var vOld, tOld: extended;
function CalcLength(dt, L, dtNew, vNew: extended): extended;
begin
  if dt > tOld + dtNew then
    Result := L + (vNew + vOld) * dtNew / 2
  else if dt > tOld then
    Result := L + (vOld + (vOld + (vNew - vOld) / dtNew * (dt - tOld))) / 2 * (dt - tOld)
  else
    Result := L;
  vOld := vNew;
  tOld := tOld + dtNew;
end;

function CalcDoor1(dt: extended): extended;
begin
  // рассчитываем положение дверей 0 - закрыто, 1 - открыто
  Result := 0;
  if dt > 40 + 3 * 60 + StopTime - 5 then
    dt  := dt - (40 + 3 * 60 + StopTime);
  if dt < 0.5 then
    exit;
  if dt <= 2 then
    Result := (dt - 0.5) ^ 2 / 2.25
  else if dt <= StopTime - 2.5 then
    Result := 1
  else if dt <= StopTime - 1 then
    Result := 1 - (dt - (StopTime - 2.5)) ^ 2 / 2.25
  else if (dt > StopTime - 0.9) and (dt <= StopTime - 0.7) then
    Result := (0.01 - (dt - (StopTime - 0.8)) ^ 2) * 4;
end; // CalcDoor1

function CalcTrain1(dt: extended): extended;
var L: extended;
    nt, v: extended;
begin
  tOld := 0; vOld := 0; L := 0;
  L := CalcLength(dt, L, -10, -10);
  L := CalcLength(dt, L, 10, 0); // 1-я остановка
  L := CalcLength(dt, L, StopTime, 0);
  L := CalcLength(dt, L, 10, -10);
  L := CalcLength(dt, L, 10, 0); // 2-я остановка
  L := CalcLength(dt, L, 3 * 60, 0); // уехал на 3 минуты
  L := CalcLength(dt, L, 10, 10);
  L := CalcLength(dt, L, 10, 0); // 3-я остановка
  L := CalcLength(dt, L, StopTime, 0);
  L := CalcLength(dt, L, 10, 10); 

  Result := L;
end; // CalcTrain1

procedure DrawSingleTrain1(TrainNumber: integer; LeftOpened: Boolean);
var dDoor, LHead: extended;
    i, SegmentHead, SegmentTail: integer;
    Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1: extended;
    Wheel2X, Wheel2Y, Wheel2Z, AngleXY2, AngleZ2: extended;
    Wheel3X, Wheel3Y, Wheel3Z, AngleXY3, AngleZ3: extended;
    dt: extended;
    StraightTrain: Boolean;
begin // DrawSingleTrain1
  dt := t - tArrive[TrainNumber];

  if (dt < MinTime) or (dt > MaxTime) then
    exit;

  // запоминаем, когда поезд отправился, для часов
  if (dt > StopTime + 3) and (tDeparture[TrainNumber] < tArrive[TrainNumber]) then
    tDeparture[TrainNumber] := Round(t) + 0.5;

  LHead := CalcTrain1(dt);

  // обрезка
  if (LHead > 0) and DoClipHead[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipHead[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(-1, 0, 0, 0);
    glPopMatrix;
  end else if (LHead < 0) and DoClipTail[TrainNumber] then begin
    CalcWheel(TrainNumber, ClipTail[TrainNumber], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
    glPushMatrix;
    glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
    glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
    EnableClipPlane(1, 0, 0, 0);
    glPopMatrix;
  end;

  // при помощи коэффициентов приводим к масштабу
  LHead := -50 * LHead + Stops[TrainNumber];
  dDoor := CalcDoor1(dt) * 18;

  // поезд
  CalcWheel(TrainNumber, LHead - Tel1[0], Wheel1X, Wheel1Y, Wheel1Z, AngleXY1, AngleZ1);
  glPushMatrix;
  glTranslatef(Wheel1X, Wheel1Y, Wheel1Z);
  glRotatef(AngleXY1, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
  glRotatef(-AngleZ1, 0, 1, 0); // Поворачиваем сцену на угол вокруг оси Y

  if dDoor = 0 then
    Draw3dObject('Nomernoy.Train.Closed')
  else begin
    if LeftOpened then begin
      glTranslatef(dDoor, 0, 0);
      Draw3dObject('Nomernoy.dverLL'); // Левая дверь
      glTranslatef(-2 * dDoor, 0, 0);
      Draw3dObject('Nomernoy.dverLR'); // Правая дверь
      glTranslatef(dDoor, 0, 0);
      Draw3dObject('Nomernoy.Train.LeftOpened'); // поезд
    end else begin
      glTranslatef(dDoor, 0, 0);
      Draw3dObject('Nomernoy.dverRR'); // Левая дверь
      glTranslatef(-2 * dDoor, 0, 0);
      Draw3dObject('Nomernoy.dverRL'); // Правая дверь
      glTranslatef(dDoor, 0, 0);
      Draw3dObject('Nomernoy.Train.RightOpened');// поезд
    end;
  end;

  glPopMatrix;

  // отключаем обрезку
//  if DoClip[TrainNumber] then
  DisableClipPlane;
end; // DrawSingleTrain1

procedure DrawTrain1(TrainNumber: integer; LeftOpened: Boolean);
var dt: extended;
begin
  glPushMatrix;
  glTranslatef(321.8, 100, 0);
  glRotatef(180, 0, 0, 1); // Поворачиваем сцену на угол вокруг оси Z
  DrawTrainClock(TrainNumber);
  glPopMatrix;
  DrawSingleTrain1(TrainNumber, LeftOpened);
end; // DrawTrain

var StartStatus: integer;
    i: integer;
    Hour: word;
begin
  if StartStatus = 0 then
    Init();

  t := Time * 86400;
  Hour := Trunc(t / 3600);
  Period := 10 * 60;//GetPeriod(Hour);

//  DrawEscalatorStairs(Hour, t);

  if StartStatus = 0 then
    GetInitPositions
  else
    GetPositionAbovePeriod;


  // рисуем поезда
  DrawTrain1(1, True); //2
//  DrawPath(24);

  StartStatus := 1;
end.